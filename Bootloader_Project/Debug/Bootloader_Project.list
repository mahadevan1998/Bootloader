
Bootloader_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003594  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08003764  08003764  00013764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a9c  08003a9c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003aa4  08003aa4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000064  08003b10  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08003b10  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a1c  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000183e  00000000  00000000  00028af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  0002a338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000602  00000000  00000000  0002ab20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213f9  00000000  00000000  0002b122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a16b  00000000  00000000  0004c51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8e7d  00000000  00000000  00056686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000247c  00000000  00000000  0011f504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00121980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800374c 	.word	0x0800374c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800374c 	.word	0x0800374c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fe32 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f822 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8f6 	bl	80007b8 <MX_GPIO_Init>
  MX_CRC_Init();
 80005cc:	f000 f88c 	bl	80006e8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80005d0:	f000 f89e 	bl	8000710 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005d4:	f000 f8c6 	bl	8000764 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Lets check whether button is pressed or not, if not pressed jump to user application */
  if ( HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == GPIO_PIN_RESET )
 80005d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <main+0x44>)
 80005de:	f001 f955 	bl	800188c <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d105      	bne.n	80005f4 <main+0x38>
  {
    printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <main+0x48>)
 80005ea:	f000 f9fb 	bl	80009e4 <printmsg>
    //we should continue in bootloader mode
    bootloader_uart_read_data();
 80005ee:	f000 f951 	bl	8000894 <bootloader_uart_read_data>
 80005f2:	e004      	b.n	80005fe <main+0x42>
  }
  else
  {
    printmsg("BL_DEBUG_MSG:Button is not pressed .. executing user app\n");
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <main+0x4c>)
 80005f6:	f000 f9f5 	bl	80009e4 <printmsg>
  	//jump to user application
  	bootloader_jump_to_user_app();
 80005fa:	f000 f9cf 	bl	800099c <bootloader_jump_to_user_app>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0x42>
 8000600:	40020800 	.word	0x40020800
 8000604:	08003764 	.word	0x08003764
 8000608:	0800379c 	.word	0x0800379c

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	2234      	movs	r2, #52	; 0x34
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fc12 	bl	8002e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <SystemClock_Config+0xd4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a29      	ldr	r2, [pc, #164]	; (80006e0 <SystemClock_Config+0xd4>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xd4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <SystemClock_Config+0xd8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000658:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemClock_Config+0xd8>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemClock_Config+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000680:	2310      	movs	r3, #16
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000684:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000688:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068a:	2304      	movs	r3, #4
 800068c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fc72 	bl	8001f84 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006a6:	f000 fc55 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2302      	movs	r3, #2
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2102      	movs	r1, #2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f912 	bl	80018f0 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006d2:	f000 fc3f 	bl	8000f54 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_CRC_Init+0x20>)
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <MX_CRC_Init+0x24>)
 80006f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_CRC_Init+0x20>)
 80006f4:	f000 feef 	bl	80014d6 <HAL_CRC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006fe:	f000 fc29 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000080 	.word	0x20000080
 800070c:	40023000 	.word	0x40023000

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f001 feba 	bl	80024c0 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 fbff 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000088 	.word	0x20000088
 8000760:	40004400 	.word	0x40004400

08000764 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART3_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_USART3_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USART3_UART_Init+0x4c>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART3_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART3_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART3_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART3_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART3_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART3_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART3_UART_Init+0x4c>)
 800079c:	f001 fe90 	bl	80024c0 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 fbd5 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000d0 	.word	0x200000d0
 80007b4:	40004800 	.word	0x40004800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a2c      	ldr	r2, [pc, #176]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a25      	ldr	r2, [pc, #148]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <MX_GPIO_Init+0xd0>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2120      	movs	r1, #32
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <MX_GPIO_Init+0xd4>)
 8000844:	f001 f83a 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_GPIO_Init+0xd8>)
 8000860:	f000 fe80 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000864:	2320      	movs	r3, #32
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_GPIO_Init+0xd4>)
 800087c:	f000 fe72 	bl	8001564 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	40020800 	.word	0x40020800

08000894 <bootloader_uart_read_data>:

/* USER CODE BEGIN 4 */
void bootloader_uart_read_data(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		memset(bl_rx_buffer,0,200);
 800089e:	22c8      	movs	r2, #200	; 0xc8
 80008a0:	2100      	movs	r1, #0
 80008a2:	4839      	ldr	r0, [pc, #228]	; (8000988 <bootloader_uart_read_data+0xf4>)
 80008a4:	f002 face 	bl	8002e44 <memset>
		__HAL_CRC_DR_RESET(&hcrc);
 80008a8:	4b38      	ldr	r3, [pc, #224]	; (800098c <bootloader_uart_read_data+0xf8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	4b37      	ldr	r3, [pc, #220]	; (800098c <bootloader_uart_read_data+0xf8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f042 0201 	orr.w	r2, r2, #1
 80008b6:	609a      	str	r2, [r3, #8]
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
		HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	2201      	movs	r2, #1
 80008be:	4932      	ldr	r1, [pc, #200]	; (8000988 <bootloader_uart_read_data+0xf4>)
 80008c0:	4833      	ldr	r0, [pc, #204]	; (8000990 <bootloader_uart_read_data+0xfc>)
 80008c2:	f001 fed8 	bl	8002676 <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <bootloader_uart_read_data+0xf4>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295
 80008d4:	492f      	ldr	r1, [pc, #188]	; (8000994 <bootloader_uart_read_data+0x100>)
 80008d6:	482e      	ldr	r0, [pc, #184]	; (8000990 <bootloader_uart_read_data+0xfc>)
 80008d8:	f001 fecd 	bl	8002676 <HAL_UART_Receive>

		/* Decode command */
		switch(bl_rx_buffer[1])
 80008dc:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <bootloader_uart_read_data+0xf4>)
 80008de:	785b      	ldrb	r3, [r3, #1]
 80008e0:	3b51      	subs	r3, #81	; 0x51
 80008e2:	2b0b      	cmp	r3, #11
 80008e4:	d84a      	bhi.n	800097c <bootloader_uart_read_data+0xe8>
 80008e6:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <bootloader_uart_read_data+0x58>)
 80008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ec:	0800091d 	.word	0x0800091d
 80008f0:	08000925 	.word	0x08000925
 80008f4:	0800092d 	.word	0x0800092d
 80008f8:	08000935 	.word	0x08000935
 80008fc:	0800093d 	.word	0x0800093d
 8000900:	08000945 	.word	0x08000945
 8000904:	0800094d 	.word	0x0800094d
 8000908:	08000955 	.word	0x08000955
 800090c:	0800095d 	.word	0x0800095d
 8000910:	08000965 	.word	0x08000965
 8000914:	0800096d 	.word	0x0800096d
 8000918:	08000975 	.word	0x08000975
			{
		       case BL_GET_VER:
		           bootloader_handle_getver_cmd(bl_rx_buffer);
 800091c:	481a      	ldr	r0, [pc, #104]	; (8000988 <bootloader_uart_read_data+0xf4>)
 800091e:	f000 f95d 	bl	8000bdc <bootloader_handle_getver_cmd>
		           break;
 8000922:	e02f      	b.n	8000984 <bootloader_uart_read_data+0xf0>
		       case BL_GET_HELP:
		           bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000924:	4818      	ldr	r0, [pc, #96]	; (8000988 <bootloader_uart_read_data+0xf4>)
 8000926:	f000 f99d 	bl	8000c64 <bootloader_handle_gethelp_cmd>
		           break;
 800092a:	e02b      	b.n	8000984 <bootloader_uart_read_data+0xf0>
		       case BL_GET_CID:
		           bootloader_handle_getcid_cmd(bl_rx_buffer);
 800092c:	4816      	ldr	r0, [pc, #88]	; (8000988 <bootloader_uart_read_data+0xf4>)
 800092e:	f000 f9d3 	bl	8000cd8 <bootloader_handle_getcid_cmd>
		           break;
 8000932:	e027      	b.n	8000984 <bootloader_uart_read_data+0xf0>
		       case BL_GET_RDP_STATUS:
		           bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000934:	4814      	ldr	r0, [pc, #80]	; (8000988 <bootloader_uart_read_data+0xf4>)
 8000936:	f000 fa17 	bl	8000d68 <bootloader_handle_getrdp_cmd>
		           break;
 800093a:	e023      	b.n	8000984 <bootloader_uart_read_data+0xf0>
		       case BL_GO_TO_ADDR:
		           bootloader_handle_go_cmd(bl_rx_buffer);
 800093c:	4812      	ldr	r0, [pc, #72]	; (8000988 <bootloader_uart_read_data+0xf4>)
 800093e:	f000 fa5b 	bl	8000df8 <bootloader_handle_go_cmd>
		           break;
 8000942:	e01f      	b.n	8000984 <bootloader_uart_read_data+0xf0>
		       case BL_FLASH_ERASE:
		           bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000944:	4810      	ldr	r0, [pc, #64]	; (8000988 <bootloader_uart_read_data+0xf4>)
 8000946:	f000 fabf 	bl	8000ec8 <bootloader_handle_flash_erase_cmd>
		           break;
 800094a:	e01b      	b.n	8000984 <bootloader_uart_read_data+0xf0>
		       case BL_MEM_WRITE:
		           bootloader_handle_mem_write_cmd(bl_rx_buffer);
 800094c:	480e      	ldr	r0, [pc, #56]	; (8000988 <bootloader_uart_read_data+0xf4>)
 800094e:	f000 fac5 	bl	8000edc <bootloader_handle_mem_write_cmd>
		           break;
 8000952:	e017      	b.n	8000984 <bootloader_uart_read_data+0xf0>
		       case BL_EN_RW_PROTECT:
		           bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <bootloader_uart_read_data+0xf4>)
 8000956:	f000 facb 	bl	8000ef0 <bootloader_handle_en_rw_protect>
		           break;
 800095a:	e013      	b.n	8000984 <bootloader_uart_read_data+0xf0>
		       case BL_MEM_READ:
		           bootloader_handle_mem_read(bl_rx_buffer);
 800095c:	480a      	ldr	r0, [pc, #40]	; (8000988 <bootloader_uart_read_data+0xf4>)
 800095e:	f000 fad1 	bl	8000f04 <bootloader_handle_mem_read>
		           break;
 8000962:	e00f      	b.n	8000984 <bootloader_uart_read_data+0xf0>
		       case BL_READ_SECTOR_P_STATUS:
		           bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <bootloader_uart_read_data+0xf4>)
 8000966:	f000 fad7 	bl	8000f18 <bootloader_handle_read_sector_protection_status>
		           break;
 800096a:	e00b      	b.n	8000984 <bootloader_uart_read_data+0xf0>
		       case BL_OTP_READ:
		           bootloader_handle_read_otp(bl_rx_buffer);
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <bootloader_uart_read_data+0xf4>)
 800096e:	f000 fadd 	bl	8000f2c <bootloader_handle_read_otp>
		           break;
 8000972:	e007      	b.n	8000984 <bootloader_uart_read_data+0xf0>
			  case BL_DIS_R_W_PROTECT:
		           bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <bootloader_uart_read_data+0xf4>)
 8000976:	f000 fae3 	bl	8000f40 <bootloader_handle_dis_rw_protect>
		           break;
 800097a:	e003      	b.n	8000984 <bootloader_uart_read_data+0xf0>
		           default:
		           printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <bootloader_uart_read_data+0x104>)
 800097e:	f000 f831 	bl	80009e4 <printmsg>
		           break;
 8000982:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 8000984:	e78b      	b.n	800089e <bootloader_uart_read_data+0xa>
 8000986:	bf00      	nop
 8000988:	20000118 	.word	0x20000118
 800098c:	20000080 	.word	0x20000080
 8000990:	20000088 	.word	0x20000088
 8000994:	20000119 	.word	0x20000119
 8000998:	080037d8 	.word	0x080037d8

0800099c <bootloader_jump_to_user_app>:
			}

	}
}
void bootloader_jump_to_user_app(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
	//just a function pointer to hold the address of the reset handler of the user app.
	void(*app_reset_handler)(void);

	printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <bootloader_jump_to_user_app+0x38>)
 80009a4:	f000 f81e 	bl	80009e4 <printmsg>

	 // 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(volatile uint32_t*)FLASH_SECTOR2_BASE_ADDRESS;
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <bootloader_jump_to_user_app+0x3c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]

	/* 2. Now fetch the reset handler address of the user application
	* from the location FLASH_SECTOR2_BASE_ADDRESS+4
	*/

	app_reset_handler = (void*)(*(volatile uint32_t*)(FLASH_SECTOR2_BASE_ADDRESS + 4));
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <bootloader_jump_to_user_app+0x40>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	60bb      	str	r3, [r7, #8]

	printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	480a      	ldr	r0, [pc, #40]	; (80009e0 <bootloader_jump_to_user_app+0x44>)
 80009b8:	f000 f814 	bl	80009e4 <printmsg>
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f383 8808 	msr	MSP, r3
}
 80009c6:	bf00      	nop

	//This function comes from CMSIS.
	__set_MSP(msp_value);

	//3. jump to reset handler of the user application
	app_reset_handler();
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4798      	blx	r3

}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	08003810 	.word	0x08003810
 80009d8:	08008000 	.word	0x08008000
 80009dc:	08008004 	.word	0x08008004
 80009e0:	0800383c 	.word	0x0800383c

080009e4 <printmsg>:
/* prints formatted string to console over UART */
 void printmsg(char *format,...)
 {
 80009e4:	b40f      	push	{r0, r1, r2, r3}
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b096      	sub	sp, #88	; 0x58
 80009ea:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80009ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009f0:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fa18 	bl	8002e30 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fc03 	bl	8000210 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f107 0108 	add.w	r1, r7, #8
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <printmsg+0x48>)
 8000a18:	f001 fda2 	bl	8002560 <HAL_UART_Transmit>
	va_end(args);
#endif
 }
 8000a1c:	bf00      	nop
 8000a1e:	3758      	adds	r7, #88	; 0x58
 8000a20:	46bd      	mov	sp, r7
 8000a22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a26:	b004      	add	sp, #16
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000d0 	.word	0x200000d0

08000a30 <bootloader_send_ack>:
 /*This function sends ACK if CRC matches along with "len to follow"*/
 void bootloader_send_ack(uint8_t follow_len)
 {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
 	 //here we send 2 byte.. first byte is ack and the second byte is len value
 	uint8_t ack_buf[2];
 	ack_buf[0] = BL_ACK;
 8000a3a:	23a5      	movs	r3, #165	; 0xa5
 8000a3c:	733b      	strb	r3, [r7, #12]
 	ack_buf[1] = follow_len;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	737b      	strb	r3, [r7, #13]
 	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8000a42:	f107 010c 	add.w	r1, r7, #12
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <bootloader_send_ack+0x2c>)
 8000a4e:	f001 fd87 	bl	8002560 <HAL_UART_Transmit>

 }
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000088 	.word	0x20000088

08000a60 <bootloader_send_nack>:

 /*This function sends NACK */
 void bootloader_send_nack(void)
 {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 	uint8_t nack = BL_NACK;
 8000a66:	237f      	movs	r3, #127	; 0x7f
 8000a68:	71fb      	strb	r3, [r7, #7]
 	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 8000a6a:	1df9      	adds	r1, r7, #7
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	2201      	movs	r2, #1
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <bootloader_send_nack+0x20>)
 8000a74:	f001 fd74 	bl	8002560 <HAL_UART_Transmit>
 }
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000088 	.word	0x20000088

08000a84 <bootloader_verify_crc>:

 //This verifies the CRC of the given buffer in pData .
 uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
 {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
     uint32_t uwCRCValue=0xff;
 8000a90:	23ff      	movs	r3, #255	; 0xff
 8000a92:	61fb      	str	r3, [r7, #28]

     for (uint32_t i=0 ; i < len ; i++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
 8000a98:	e00f      	b.n	8000aba <bootloader_verify_crc+0x36>
 	{
         uint32_t i_data = pData[i];
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	617b      	str	r3, [r7, #20]
         uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <bootloader_verify_crc+0x54>)
 8000aae:	f000 fd2e 	bl	800150e <HAL_CRC_Accumulate>
 8000ab2:	61f8      	str	r0, [r7, #28]
     for (uint32_t i=0 ; i < len ; i++)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d3eb      	bcc.n	8000a9a <bootloader_verify_crc+0x16>
 	}

 	 /* Reset CRC Calculation Unit */
   //__HAL_CRC_DR_RESET(&hcrc);

 	if( uwCRCValue == crc_host)
 8000ac2:	69fa      	ldr	r2, [r7, #28]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d101      	bne.n	8000ace <bootloader_verify_crc+0x4a>
 	{
 		return VERIFY_CRC_SUCCESS;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <bootloader_verify_crc+0x4c>
 	}

 	return VERIFY_CRC_FAIL;
 8000ace:	2301      	movs	r3, #1
 }
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000080 	.word	0x20000080

08000adc <bootloader_uart_write_data>:

 /* This function writes data in to C_UART */
 void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
 {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
     /*you can replace the below ST's USART driver API call with your MCUs driver API call */
 	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <bootloader_uart_write_data+0x24>)
 8000af2:	f001 fd35 	bl	8002560 <HAL_UART_Transmit>

 }
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000088 	.word	0x20000088

08000b04 <get_bootloader_version>:


 //Just returns the macro value .
 uint8_t get_bootloader_version(void)
 {
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
   return (uint8_t)BL_VERSION;
 8000b08:	2310      	movs	r3, #16
 }
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <get_mcu_chip_id>:
 //Read the chip identifier or device Identifier
 uint16_t get_mcu_chip_id(void)
 {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 	and the die revision. It is part of the DBG_MCU component and is mapped on the
 	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
 	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
 	It is even accessible while the MCU is under system reset. */
 	uint16_t cid;
 	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <get_mcu_chip_id+0x20>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b24:	80fb      	strh	r3, [r7, #6]
 	return  cid;
 8000b26:	88fb      	ldrh	r3, [r7, #6]

 }
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e0042000 	.word	0xe0042000

08000b38 <get_flash_rdp_level>:

 /*This function reads the RDP ( Read protection option byte) value
  *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
  */
 uint8_t get_flash_rdp_level(void)
 {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0

 	uint8_t rdp_status=0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71fb      	strb	r3, [r7, #7]
 	FLASH_OBProgramInitTypeDef  ob_handle;
 	HAL_FLASHEx_OBGetConfig(&ob_handle);
 	rdp_status = (uint8_t)ob_handle.RDPLevel;
 #else

 	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <get_flash_rdp_level+0x24>)
 8000b44:	603b      	str	r3, [r7, #0]
 	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	71fb      	strb	r3, [r7, #7]
 #endif

 	return rdp_status;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]

 }
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	1fffc000 	.word	0x1fffc000

08000b60 <verify_address>:

 //verify the address sent by the host .
 uint8_t verify_address(uint32_t go_address)
 {
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

 //incomplete -poorly written .. optimize it
 	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b6e:	d305      	bcc.n	8000b7c <verify_address+0x1c>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <verify_address+0x68>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d801      	bhi.n	8000b7c <verify_address+0x1c>
 	{
 		return ADDR_VALID;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e01e      	b.n	8000bba <verify_address+0x5a>
 	}
 	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <verify_address+0x68>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d305      	bcc.n	8000b90 <verify_address+0x30>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <verify_address+0x6c>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d801      	bhi.n	8000b90 <verify_address+0x30>
 	{
 		return ADDR_VALID;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e014      	b.n	8000bba <verify_address+0x5a>
 	}
 	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000b96:	d305      	bcc.n	8000ba4 <verify_address+0x44>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <verify_address+0x70>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d801      	bhi.n	8000ba4 <verify_address+0x44>
 	{
 		return ADDR_VALID;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e00a      	b.n	8000bba <verify_address+0x5a>
 	}
 	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <verify_address+0x74>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d305      	bcc.n	8000bb8 <verify_address+0x58>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <verify_address+0x78>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d801      	bhi.n	8000bb8 <verify_address+0x58>
 	{
 		return ADDR_VALID;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e000      	b.n	8000bba <verify_address+0x5a>
 	}
 	else
 		return ADDR_INVALID;
 8000bb8:	2301      	movs	r3, #1
 }
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	2001c000 	.word	0x2001c000
 8000bcc:	20020000 	.word	0x20020000
 8000bd0:	0807ffff 	.word	0x0807ffff
 8000bd4:	40024000 	.word	0x40024000
 8000bd8:	40025000 	.word	0x40025000

08000bdc <bootloader_handle_getver_cmd>:
 /*Helper function to handle BL_GET_VER command */
 void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
 {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
     uint8_t bl_version;

     // 1) verify the checksum
       printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");
 8000be4:	481b      	ldr	r0, [pc, #108]	; (8000c54 <bootloader_handle_getver_cmd+0x78>)
 8000be6:	f7ff fefd 	bl	80009e4 <printmsg>

 	 //Total length of the command packet. bl_rx_buffer[0] is 1st byte received from host, and contains length to follow
     // so length to follow + bl_rx_buffer[0] itself is total length of command packet received from host
 	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
 	  /* extract the CRC32 sent by the Host */
 	  /*format of command packet received from host is : LenToFollow + Command + CRC (4bytes) */
 	  /* bl_rx_buffer+command_packet_len - 4 = moving the "pointer to received data" to beginning of CRC */
 	  /* base addr + total command len - 4 (as crc is 4 bytes) */
 	  /* then read 4 bytes crc using (uint32_t*) */
 	  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3b04      	subs	r3, #4
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	613b      	str	r3, [r7, #16]

 	 /* pass data, len and host crc and calculate crc and compare with host crc */
     if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3b04      	subs	r3, #4
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4619      	mov	r1, r3
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ff3c 	bl	8000a84 <bootloader_verify_crc>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d117      	bne.n	8000c42 <bootloader_handle_getver_cmd+0x66>
     {
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <bootloader_handle_getver_cmd+0x7c>)
 8000c14:	f7ff fee6 	bl	80009e4 <printmsg>
         // checksum is correct..
         // API called with length to follow, that is length of reply bootloader will send
         bootloader_send_ack(1);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff ff09 	bl	8000a30 <bootloader_send_ack>
         bl_version=get_bootloader_version();
 8000c1e:	f7ff ff71 	bl	8000b04 <get_bootloader_version>
 8000c22:	4603      	mov	r3, r0
 8000c24:	73fb      	strb	r3, [r7, #15]
         printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n",bl_version,bl_version);
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	480b      	ldr	r0, [pc, #44]	; (8000c5c <bootloader_handle_getver_cmd+0x80>)
 8000c30:	f7ff fed8 	bl	80009e4 <printmsg>
         bootloader_uart_write_data(&bl_version,1);
 8000c34:	f107 030f 	add.w	r3, r7, #15
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff4e 	bl	8000adc <bootloader_uart_write_data>
         //checksum is wrong send nack
         bootloader_send_nack();
     }


 }
 8000c40:	e004      	b.n	8000c4c <bootloader_handle_getver_cmd+0x70>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <bootloader_handle_getver_cmd+0x84>)
 8000c44:	f7ff fece 	bl	80009e4 <printmsg>
         bootloader_send_nack();
 8000c48:	f7ff ff0a 	bl	8000a60 <bootloader_send_nack>
 }
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08003868 	.word	0x08003868
 8000c58:	08003894 	.word	0x08003894
 8000c5c:	080038b8 	.word	0x080038b8
 8000c60:	080038d8 	.word	0x080038d8

08000c64 <bootloader_handle_gethelp_cmd>:
 void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
 {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
        printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000c6c:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <bootloader_handle_gethelp_cmd+0x60>)
 8000c6e:	f7ff feb9 	bl	80009e4 <printmsg>


	  	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <bootloader_handle_gethelp_cmd+0x64>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]

	  	  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3b04      	subs	r3, #4
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <bootloader_handle_gethelp_cmd+0x64>)
 8000c80:	4413      	add	r3, r2
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60bb      	str	r3, [r7, #8]

	  	 /* pass data, len and host crc and calculate crc and compare with host crc */
	      if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3b04      	subs	r3, #4
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <bootloader_handle_gethelp_cmd+0x64>)
 8000c90:	f7ff fef8 	bl	8000a84 <bootloader_verify_crc>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10a      	bne.n	8000cb0 <bootloader_handle_gethelp_cmd+0x4c>
	      {
	          printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <bootloader_handle_gethelp_cmd+0x68>)
 8000c9c:	f7ff fea2 	bl	80009e4 <printmsg>
	          // checksum is correct..
	          // API called with length to follow, that is length of reply bootloader will send
	          bootloader_send_ack(sizeof(supported_commands));
 8000ca0:	2008      	movs	r0, #8
 8000ca2:	f7ff fec5 	bl	8000a30 <bootloader_send_ack>
	          bootloader_uart_write_data(supported_commands,sizeof(supported_commands));
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <bootloader_handle_gethelp_cmd+0x6c>)
 8000caa:	f7ff ff17 	bl	8000adc <bootloader_uart_write_data>
	      {
	          printmsg("BL_DEBUG_MSG:checksum fail !!\n");
	          //checksum is wrong send nack
	          bootloader_send_nack();
	      }
 }
 8000cae:	e004      	b.n	8000cba <bootloader_handle_gethelp_cmd+0x56>
	          printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <bootloader_handle_gethelp_cmd+0x70>)
 8000cb2:	f7ff fe97 	bl	80009e4 <printmsg>
	          bootloader_send_nack();
 8000cb6:	f7ff fed3 	bl	8000a60 <bootloader_send_nack>
 }
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	080038f8 	.word	0x080038f8
 8000cc8:	20000118 	.word	0x20000118
 8000ccc:	08003894 	.word	0x08003894
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	080038d8 	.word	0x080038d8

08000cd8 <bootloader_handle_getcid_cmd>:

 /*Helper function to handle BL_GET_CID command */
 void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
 {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 	uint16_t bl_cid_num = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	81fb      	strh	r3, [r7, #14]
 	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000ce4:	481b      	ldr	r0, [pc, #108]	; (8000d54 <bootloader_handle_getcid_cmd+0x7c>)
 8000ce6:	f7ff fe7d 	bl	80009e4 <printmsg>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <bootloader_handle_getcid_cmd+0x80>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3b04      	subs	r3, #4
 8000cf6:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <bootloader_handle_getcid_cmd+0x80>)
 8000cf8:	4413      	add	r3, r2
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3b04      	subs	r3, #4
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4814      	ldr	r0, [pc, #80]	; (8000d58 <bootloader_handle_getcid_cmd+0x80>)
 8000d08:	f7ff febc 	bl	8000a84 <bootloader_verify_crc>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d117      	bne.n	8000d42 <bootloader_handle_getcid_cmd+0x6a>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000d12:	4812      	ldr	r0, [pc, #72]	; (8000d5c <bootloader_handle_getcid_cmd+0x84>)
 8000d14:	f7ff fe66 	bl	80009e4 <printmsg>
         bootloader_send_ack(2);
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f7ff fe89 	bl	8000a30 <bootloader_send_ack>
         bl_cid_num = get_mcu_chip_id();
 8000d1e:	f7ff fef9 	bl	8000b14 <get_mcu_chip_id>
 8000d22:	4603      	mov	r3, r0
 8000d24:	81fb      	strh	r3, [r7, #14]
         printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000d26:	89fb      	ldrh	r3, [r7, #14]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	89fb      	ldrh	r3, [r7, #14]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <bootloader_handle_getcid_cmd+0x88>)
 8000d30:	f7ff fe58 	bl	80009e4 <printmsg>
         bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000d34:	f107 030e 	add.w	r3, r7, #14
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fece 	bl	8000adc <bootloader_uart_write_data>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}


 }
 8000d40:	e004      	b.n	8000d4c <bootloader_handle_getcid_cmd+0x74>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000d42:	4808      	ldr	r0, [pc, #32]	; (8000d64 <bootloader_handle_getcid_cmd+0x8c>)
 8000d44:	f7ff fe4e 	bl	80009e4 <printmsg>
         bootloader_send_nack();
 8000d48:	f7ff fe8a 	bl	8000a60 <bootloader_send_nack>
 }
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	08003924 	.word	0x08003924
 8000d58:	20000118 	.word	0x20000118
 8000d5c:	08003894 	.word	0x08003894
 8000d60:	08003950 	.word	0x08003950
 8000d64:	080038d8 	.word	0x080038d8

08000d68 <bootloader_handle_getrdp_cmd>:
 /*Helper function to handle BL_GET_RDP_STATUS command */
 void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
 {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
     uint8_t rdp_level = 0x00;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
     printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 8000d74:	481b      	ldr	r0, [pc, #108]	; (8000de4 <bootloader_handle_getrdp_cmd+0x7c>)
 8000d76:	f7ff fe35 	bl	80009e4 <printmsg>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <bootloader_handle_getrdp_cmd+0x80>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3b04      	subs	r3, #4
 8000d86:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <bootloader_handle_getrdp_cmd+0x80>)
 8000d88:	4413      	add	r3, r2
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3b04      	subs	r3, #4
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4619      	mov	r1, r3
 8000d96:	4814      	ldr	r0, [pc, #80]	; (8000de8 <bootloader_handle_getrdp_cmd+0x80>)
 8000d98:	f7ff fe74 	bl	8000a84 <bootloader_verify_crc>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d117      	bne.n	8000dd2 <bootloader_handle_getrdp_cmd+0x6a>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000da2:	4812      	ldr	r0, [pc, #72]	; (8000dec <bootloader_handle_getrdp_cmd+0x84>)
 8000da4:	f7ff fe1e 	bl	80009e4 <printmsg>
         bootloader_send_ack(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff fe41 	bl	8000a30 <bootloader_send_ack>
         rdp_level = get_flash_rdp_level();
 8000dae:	f7ff fec3 	bl	8000b38 <get_flash_rdp_level>
 8000db2:	4603      	mov	r3, r0
 8000db4:	73fb      	strb	r3, [r7, #15]
         printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	4619      	mov	r1, r3
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	480c      	ldr	r0, [pc, #48]	; (8000df0 <bootloader_handle_getrdp_cmd+0x88>)
 8000dc0:	f7ff fe10 	bl	80009e4 <printmsg>
         bootloader_uart_write_data(&rdp_level,1);
 8000dc4:	f107 030f 	add.w	r3, r7, #15
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fe86 	bl	8000adc <bootloader_uart_write_data>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}


 }
 8000dd0:	e004      	b.n	8000ddc <bootloader_handle_getrdp_cmd+0x74>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000dd2:	4808      	ldr	r0, [pc, #32]	; (8000df4 <bootloader_handle_getrdp_cmd+0x8c>)
 8000dd4:	f7ff fe06 	bl	80009e4 <printmsg>
         bootloader_send_nack();
 8000dd8:	f7ff fe42 	bl	8000a60 <bootloader_send_nack>
 }
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	08003974 	.word	0x08003974
 8000de8:	20000118 	.word	0x20000118
 8000dec:	08003894 	.word	0x08003894
 8000df0:	080039a0 	.word	0x080039a0
 8000df4:	080038d8 	.word	0x080038d8

08000df8 <bootloader_handle_go_cmd>:

 /*Helper function to handle BL_GO_TO_ADDR command */
 void bootloader_handle_go_cmd(uint8_t *pBuffer)
 {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
     uint32_t go_address=0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
     uint8_t addr_valid = ADDR_VALID;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
     uint8_t addr_invalid = ADDR_INVALID;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73bb      	strb	r3, [r7, #14]

     printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000e0c:	4827      	ldr	r0, [pc, #156]	; (8000eac <bootloader_handle_go_cmd+0xb4>)
 8000e0e:	f7ff fde9 	bl	80009e4 <printmsg>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <bootloader_handle_go_cmd+0xb8>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	3b04      	subs	r3, #4
 8000e1e:	4a24      	ldr	r2, [pc, #144]	; (8000eb0 <bootloader_handle_go_cmd+0xb8>)
 8000e20:	4413      	add	r3, r2
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	617b      	str	r3, [r7, #20]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	3b04      	subs	r3, #4
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4820      	ldr	r0, [pc, #128]	; (8000eb0 <bootloader_handle_go_cmd+0xb8>)
 8000e30:	f7ff fe28 	bl	8000a84 <bootloader_verify_crc>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d12e      	bne.n	8000e98 <bootloader_handle_go_cmd+0xa0>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000e3a:	481e      	ldr	r0, [pc, #120]	; (8000eb4 <bootloader_handle_go_cmd+0xbc>)
 8000e3c:	f7ff fdd2 	bl	80009e4 <printmsg>

         bootloader_send_ack(1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff fdf5 	bl	8000a30 <bootloader_send_ack>

         //extract the go address
         go_address = *((uint32_t *)&pBuffer[2] );
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e4c:	61fb      	str	r3, [r7, #28]
         printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8000e4e:	69f9      	ldr	r1, [r7, #28]
 8000e50:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <bootloader_handle_go_cmd+0xc0>)
 8000e52:	f7ff fdc7 	bl	80009e4 <printmsg>

         if( verify_address(go_address) == ADDR_VALID )
 8000e56:	69f8      	ldr	r0, [r7, #28]
 8000e58:	f7ff fe82 	bl	8000b60 <verify_address>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d110      	bne.n	8000e84 <bootloader_handle_go_cmd+0x8c>
         {
             //tell host that address is fine
             bootloader_uart_write_data(&addr_valid,1);
 8000e62:	f107 030f 	add.w	r3, r7, #15
 8000e66:	2101      	movs	r1, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe37 	bl	8000adc <bootloader_uart_write_data>

             /*jump to "go" address. */

             go_address+=1; //make T bit =1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]

             void (*lets_jump)(void) = (void *)go_address;
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	613b      	str	r3, [r7, #16]

             printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 8000e78:	4810      	ldr	r0, [pc, #64]	; (8000ebc <bootloader_handle_go_cmd+0xc4>)
 8000e7a:	f7ff fdb3 	bl	80009e4 <printmsg>

             lets_jump();
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4798      	blx	r3
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}


 }
 8000e82:	e00e      	b.n	8000ea2 <bootloader_handle_go_cmd+0xaa>
             printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000e84:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <bootloader_handle_go_cmd+0xc8>)
 8000e86:	f7ff fdad 	bl	80009e4 <printmsg>
             bootloader_uart_write_data(&addr_invalid,1);
 8000e8a:	f107 030e 	add.w	r3, r7, #14
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fe23 	bl	8000adc <bootloader_uart_write_data>
 }
 8000e96:	e004      	b.n	8000ea2 <bootloader_handle_go_cmd+0xaa>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000e98:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <bootloader_handle_go_cmd+0xcc>)
 8000e9a:	f7ff fda3 	bl	80009e4 <printmsg>
         bootloader_send_nack();
 8000e9e:	f7ff fddf 	bl	8000a60 <bootloader_send_nack>
 }
 8000ea2:	bf00      	nop
 8000ea4:	3720      	adds	r7, #32
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	080039c0 	.word	0x080039c0
 8000eb0:	20000118 	.word	0x20000118
 8000eb4:	08003894 	.word	0x08003894
 8000eb8:	080039e8 	.word	0x080039e8
 8000ebc:	08003a04 	.word	0x08003a04
 8000ec0:	08003a2c 	.word	0x08003a2c
 8000ec4:	080038d8 	.word	0x080038d8

08000ec8 <bootloader_handle_flash_erase_cmd>:
 void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
 {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

 }
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <bootloader_handle_mem_write_cmd>:
 void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
 {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

 }
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <bootloader_handle_en_rw_protect>:
 void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
 {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

 }
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <bootloader_handle_mem_read>:
 void bootloader_handle_mem_read (uint8_t *pBuffer)
 {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

 }
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <bootloader_handle_read_sector_protection_status>:
 void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
 {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

 }
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <bootloader_handle_read_otp>:
 void bootloader_handle_read_otp(uint8_t *pBuffer)
 {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

 }
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <bootloader_handle_dis_rw_protect>:
 void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
 {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

 }
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_MspInit+0x4c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f9e:	2007      	movs	r0, #7
 8000fa0:	f000 fa66 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_CRC_MspInit+0x3c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d10d      	bne.n	8000fde <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023000 	.word	0x40023000
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a32      	ldr	r2, [pc, #200]	; (80010dc <HAL_UART_MspInit+0xe8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12c      	bne.n	8001070 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <HAL_UART_MspInit+0xec>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a30      	ldr	r2, [pc, #192]	; (80010e0 <HAL_UART_MspInit+0xec>)
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_UART_MspInit+0xec>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	61bb      	str	r3, [r7, #24]
 8001030:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <HAL_UART_MspInit+0xec>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a29      	ldr	r2, [pc, #164]	; (80010e0 <HAL_UART_MspInit+0xec>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_UART_MspInit+0xec>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800104e:	230c      	movs	r3, #12
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105e:	2307      	movs	r3, #7
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	481e      	ldr	r0, [pc, #120]	; (80010e4 <HAL_UART_MspInit+0xf0>)
 800106a:	f000 fa7b 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800106e:	e031      	b.n	80010d4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <HAL_UART_MspInit+0xf4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d12c      	bne.n	80010d4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_UART_MspInit+0xec>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0xec>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_UART_MspInit+0xec>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_UART_MspInit+0xec>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_UART_MspInit+0xec>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_UART_MspInit+0xec>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c4:	2307      	movs	r3, #7
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <HAL_UART_MspInit+0xf8>)
 80010d0:	f000 fa48 	bl	8001564 <HAL_GPIO_Init>
}
 80010d4:	bf00      	nop
 80010d6:	3730      	adds	r7, #48	; 0x30
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40004400 	.word	0x40004400
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40004800 	.word	0x40004800
 80010ec:	40020800 	.word	0x40020800

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113c:	f000 f8c6 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f001 fe6e 	bl	8002e54 <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	220c      	movs	r2, #12
 800117c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20020000 	.word	0x20020000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	200001e0 	.word	0x200001e0
 80011ac:	20000330 	.word	0x20000330

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011d8:	f7ff ffea 	bl	80011b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	; (8001214 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	; (8001220 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001202:	f001 fe2d 	bl	8002e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff f9d9 	bl	80005bc <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001218:	08003aac 	.word	0x08003aac
  ldr r2, =_sbss
 800121c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001220:	20000330 	.word	0x20000330

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f90d 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fe80 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f917 	bl	80014be <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f8ed 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000010 	.word	0x20000010
 80012c8:	2000000c 	.word	0x2000000c

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000010 	.word	0x20000010
 80012f0:	200001e4 	.word	0x200001e4

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200001e4 	.word	0x200001e4

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff47 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff5c 	bl	8001354 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffb0 	bl	800142c <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e00e      	b.n	8001506 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	795b      	ldrb	r3, [r3, #5]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d105      	bne.n	80014fe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fd59 	bl	8000fb0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800150e:	b480      	push	{r7}
 8001510:	b087      	sub	sp, #28
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2202      	movs	r2, #2
 8001522:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e00a      	b.n	8001540 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	441a      	add	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3f0      	bcc.n	800152a <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2201      	movs	r2, #1
 8001554:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001556:	693b      	ldr	r3, [r7, #16]
}
 8001558:	4618      	mov	r0, r3
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	e165      	b.n	800184c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 8154 	bne.w	8001846 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d005      	beq.n	80015b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d130      	bne.n	8001618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b03      	cmp	r3, #3
 8001622:	d017      	beq.n	8001654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d123      	bne.n	80016a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	69b9      	ldr	r1, [r7, #24]
 80016a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0203 	and.w	r2, r3, #3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80ae 	beq.w	8001846 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <HAL_GPIO_Init+0x300>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a5c      	ldr	r2, [pc, #368]	; (8001864 <HAL_GPIO_Init+0x300>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <HAL_GPIO_Init+0x300>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001706:	4a58      	ldr	r2, [pc, #352]	; (8001868 <HAL_GPIO_Init+0x304>)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	220f      	movs	r2, #15
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4f      	ldr	r2, [pc, #316]	; (800186c <HAL_GPIO_Init+0x308>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d025      	beq.n	800177e <HAL_GPIO_Init+0x21a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4e      	ldr	r2, [pc, #312]	; (8001870 <HAL_GPIO_Init+0x30c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01f      	beq.n	800177a <HAL_GPIO_Init+0x216>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <HAL_GPIO_Init+0x310>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d019      	beq.n	8001776 <HAL_GPIO_Init+0x212>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_GPIO_Init+0x314>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0x20e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_GPIO_Init+0x318>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00d      	beq.n	800176e <HAL_GPIO_Init+0x20a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4a      	ldr	r2, [pc, #296]	; (8001880 <HAL_GPIO_Init+0x31c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d007      	beq.n	800176a <HAL_GPIO_Init+0x206>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a49      	ldr	r2, [pc, #292]	; (8001884 <HAL_GPIO_Init+0x320>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_GPIO_Init+0x202>
 8001762:	2306      	movs	r3, #6
 8001764:	e00c      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 8001766:	2307      	movs	r3, #7
 8001768:	e00a      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800176a:	2305      	movs	r3, #5
 800176c:	e008      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800176e:	2304      	movs	r3, #4
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 8001772:	2303      	movs	r3, #3
 8001774:	e004      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 8001776:	2302      	movs	r3, #2
 8001778:	e002      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800177e:	2300      	movs	r3, #0
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	f002 0203 	and.w	r2, r2, #3
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4093      	lsls	r3, r2
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001790:	4935      	ldr	r1, [pc, #212]	; (8001868 <HAL_GPIO_Init+0x304>)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <HAL_GPIO_Init+0x324>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c2:	4a31      	ldr	r2, [pc, #196]	; (8001888 <HAL_GPIO_Init+0x324>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_GPIO_Init+0x324>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ec:	4a26      	ldr	r2, [pc, #152]	; (8001888 <HAL_GPIO_Init+0x324>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <HAL_GPIO_Init+0x324>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_GPIO_Init+0x324>)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_GPIO_Init+0x324>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_GPIO_Init+0x324>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b0f      	cmp	r3, #15
 8001850:	f67f ae96 	bls.w	8001580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40013800 	.word	0x40013800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020400 	.word	0x40020400
 8001874:	40020800 	.word	0x40020800
 8001878:	40020c00 	.word	0x40020c00
 800187c:	40021000 	.word	0x40021000
 8001880:	40021400 	.word	0x40021400
 8001884:	40021800 	.word	0x40021800
 8001888:	40013c00 	.word	0x40013c00

0800188c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e001      	b.n	80018ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d8:	e003      	b.n	80018e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	041a      	lsls	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	619a      	str	r2, [r3, #24]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0cc      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001904:	4b68      	ldr	r3, [pc, #416]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d90c      	bls.n	800192c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b65      	ldr	r3, [pc, #404]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0b8      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001944:	4b59      	ldr	r3, [pc, #356]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	4a58      	ldr	r2, [pc, #352]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800194e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a52      	ldr	r2, [pc, #328]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001968:	4b50      	ldr	r3, [pc, #320]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	494d      	ldr	r1, [pc, #308]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d044      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4b47      	ldr	r3, [pc, #284]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d119      	bne.n	80019ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e07f      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d003      	beq.n	80019ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ae:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d109      	bne.n	80019ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e06f      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019be:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e067      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f023 0203 	bic.w	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4934      	ldr	r1, [pc, #208]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e0:	f7ff fc88 	bl	80012f4 <HAL_GetTick>
 80019e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e8:	f7ff fc84 	bl	80012f4 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e04f      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 020c 	and.w	r2, r3, #12
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d1eb      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a10:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d20c      	bcs.n	8001a38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e032      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4916      	ldr	r1, [pc, #88]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	490e      	ldr	r1, [pc, #56]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a76:	f000 f855 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	490a      	ldr	r1, [pc, #40]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	5ccb      	ldrb	r3, [r1, r3]
 8001a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fbe8 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	08003a50 	.word	0x08003a50
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	2000000c 	.word	0x2000000c

08001abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008

08001ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad8:	f7ff fff0 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	0a9b      	lsrs	r3, r3, #10
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	08003a60 	.word	0x08003a60

08001afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b00:	f7ff ffdc 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	0b5b      	lsrs	r3, r3, #13
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08003a60 	.word	0x08003a60

08001b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b28:	b0ae      	sub	sp, #184	; 0xb8
 8001b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b4a:	4bcb      	ldr	r3, [pc, #812]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	f200 8206 	bhi.w	8001f64 <HAL_RCC_GetSysClockFreq+0x440>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b95 	.word	0x08001b95
 8001b64:	08001f65 	.word	0x08001f65
 8001b68:	08001f65 	.word	0x08001f65
 8001b6c:	08001f65 	.word	0x08001f65
 8001b70:	08001b9d 	.word	0x08001b9d
 8001b74:	08001f65 	.word	0x08001f65
 8001b78:	08001f65 	.word	0x08001f65
 8001b7c:	08001f65 	.word	0x08001f65
 8001b80:	08001ba5 	.word	0x08001ba5
 8001b84:	08001f65 	.word	0x08001f65
 8001b88:	08001f65 	.word	0x08001f65
 8001b8c:	08001f65 	.word	0x08001f65
 8001b90:	08001d95 	.word	0x08001d95
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b94:	4bb9      	ldr	r3, [pc, #740]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b9a:	e1e7      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b9c:	4bb8      	ldr	r3, [pc, #736]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ba2:	e1e3      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba4:	4bb4      	ldr	r3, [pc, #720]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb0:	4bb1      	ldr	r3, [pc, #708]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d071      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bbc:	4bae      	ldr	r3, [pc, #696]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001bc8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001bde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001be2:	4622      	mov	r2, r4
 8001be4:	462b      	mov	r3, r5
 8001be6:	f04f 0000 	mov.w	r0, #0
 8001bea:	f04f 0100 	mov.w	r1, #0
 8001bee:	0159      	lsls	r1, r3, #5
 8001bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf4:	0150      	lsls	r0, r2, #5
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	1a51      	subs	r1, r2, r1
 8001bfe:	6439      	str	r1, [r7, #64]	; 0x40
 8001c00:	4629      	mov	r1, r5
 8001c02:	eb63 0301 	sbc.w	r3, r3, r1
 8001c06:	647b      	str	r3, [r7, #68]	; 0x44
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001c14:	4649      	mov	r1, r9
 8001c16:	018b      	lsls	r3, r1, #6
 8001c18:	4641      	mov	r1, r8
 8001c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c1e:	4641      	mov	r1, r8
 8001c20:	018a      	lsls	r2, r1, #6
 8001c22:	4641      	mov	r1, r8
 8001c24:	1a51      	subs	r1, r2, r1
 8001c26:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c28:	4649      	mov	r1, r9
 8001c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	00cb      	lsls	r3, r1, #3
 8001c40:	4641      	mov	r1, r8
 8001c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c46:	4641      	mov	r1, r8
 8001c48:	00ca      	lsls	r2, r1, #3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4622      	mov	r2, r4
 8001c52:	189b      	adds	r3, r3, r2
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
 8001c56:	462b      	mov	r3, r5
 8001c58:	460a      	mov	r2, r1
 8001c5a:	eb42 0303 	adc.w	r3, r2, r3
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	024b      	lsls	r3, r1, #9
 8001c70:	4621      	mov	r1, r4
 8001c72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c76:	4621      	mov	r1, r4
 8001c78:	024a      	lsls	r2, r1, #9
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c82:	2200      	movs	r2, #0
 8001c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c8c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c90:	f7fe fb16 	bl	80002c0 <__aeabi_uldivmod>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c9e:	e067      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca0:	4b75      	ldr	r3, [pc, #468]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001cac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cba:	2300      	movs	r3, #0
 8001cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cbe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001cc2:	4622      	mov	r2, r4
 8001cc4:	462b      	mov	r3, r5
 8001cc6:	f04f 0000 	mov.w	r0, #0
 8001cca:	f04f 0100 	mov.w	r1, #0
 8001cce:	0159      	lsls	r1, r3, #5
 8001cd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd4:	0150      	lsls	r0, r2, #5
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4621      	mov	r1, r4
 8001cdc:	1a51      	subs	r1, r2, r1
 8001cde:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	018b      	lsls	r3, r1, #6
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cfe:	4641      	mov	r1, r8
 8001d00:	018a      	lsls	r2, r1, #6
 8001d02:	4641      	mov	r1, r8
 8001d04:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d08:	4649      	mov	r1, r9
 8001d0a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d1a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d22:	4692      	mov	sl, r2
 8001d24:	469b      	mov	fp, r3
 8001d26:	4623      	mov	r3, r4
 8001d28:	eb1a 0303 	adds.w	r3, sl, r3
 8001d2c:	623b      	str	r3, [r7, #32]
 8001d2e:	462b      	mov	r3, r5
 8001d30:	eb4b 0303 	adc.w	r3, fp, r3
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d42:	4629      	mov	r1, r5
 8001d44:	028b      	lsls	r3, r1, #10
 8001d46:	4621      	mov	r1, r4
 8001d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	028a      	lsls	r2, r1, #10
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d58:	2200      	movs	r2, #0
 8001d5a:	673b      	str	r3, [r7, #112]	; 0x70
 8001d5c:	677a      	str	r2, [r7, #116]	; 0x74
 8001d5e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d62:	f7fe faad 	bl	80002c0 <__aeabi_uldivmod>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d70:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 8001d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d92:	e0eb      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d94:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da0:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d06b      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dac:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	2200      	movs	r2, #0
 8001db4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001db6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8001dc4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001dc8:	4622      	mov	r2, r4
 8001dca:	462b      	mov	r3, r5
 8001dcc:	f04f 0000 	mov.w	r0, #0
 8001dd0:	f04f 0100 	mov.w	r1, #0
 8001dd4:	0159      	lsls	r1, r3, #5
 8001dd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dda:	0150      	lsls	r0, r2, #5
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4621      	mov	r1, r4
 8001de2:	1a51      	subs	r1, r2, r1
 8001de4:	61b9      	str	r1, [r7, #24]
 8001de6:	4629      	mov	r1, r5
 8001de8:	eb63 0301 	sbc.w	r3, r3, r1
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001dfa:	4659      	mov	r1, fp
 8001dfc:	018b      	lsls	r3, r1, #6
 8001dfe:	4651      	mov	r1, sl
 8001e00:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e04:	4651      	mov	r1, sl
 8001e06:	018a      	lsls	r2, r1, #6
 8001e08:	4651      	mov	r1, sl
 8001e0a:	ebb2 0801 	subs.w	r8, r2, r1
 8001e0e:	4659      	mov	r1, fp
 8001e10:	eb63 0901 	sbc.w	r9, r3, r1
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e28:	4690      	mov	r8, r2
 8001e2a:	4699      	mov	r9, r3
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	eb18 0303 	adds.w	r3, r8, r3
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	462b      	mov	r3, r5
 8001e36:	eb49 0303 	adc.w	r3, r9, r3
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e48:	4629      	mov	r1, r5
 8001e4a:	024b      	lsls	r3, r1, #9
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e52:	4621      	mov	r1, r4
 8001e54:	024a      	lsls	r2, r1, #9
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e5e:	2200      	movs	r2, #0
 8001e60:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e62:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e68:	f7fe fa2a 	bl	80002c0 <__aeabi_uldivmod>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4613      	mov	r3, r2
 8001e72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e76:	e065      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x420>
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	00f42400 	.word	0x00f42400
 8001e80:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e84:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x458>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	4611      	mov	r1, r2
 8001e90:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e94:	653b      	str	r3, [r7, #80]	; 0x50
 8001e96:	2300      	movs	r3, #0
 8001e98:	657b      	str	r3, [r7, #84]	; 0x54
 8001e9a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001e9e:	4642      	mov	r2, r8
 8001ea0:	464b      	mov	r3, r9
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	0159      	lsls	r1, r3, #5
 8001eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb0:	0150      	lsls	r0, r2, #5
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4641      	mov	r1, r8
 8001eb8:	1a51      	subs	r1, r2, r1
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ed0:	4659      	mov	r1, fp
 8001ed2:	018b      	lsls	r3, r1, #6
 8001ed4:	4651      	mov	r1, sl
 8001ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eda:	4651      	mov	r1, sl
 8001edc:	018a      	lsls	r2, r1, #6
 8001ede:	4651      	mov	r1, sl
 8001ee0:	1a54      	subs	r4, r2, r1
 8001ee2:	4659      	mov	r1, fp
 8001ee4:	eb63 0501 	sbc.w	r5, r3, r1
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	00eb      	lsls	r3, r5, #3
 8001ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ef6:	00e2      	lsls	r2, r4, #3
 8001ef8:	4614      	mov	r4, r2
 8001efa:	461d      	mov	r5, r3
 8001efc:	4643      	mov	r3, r8
 8001efe:	18e3      	adds	r3, r4, r3
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	464b      	mov	r3, r9
 8001f04:	eb45 0303 	adc.w	r3, r5, r3
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f16:	4629      	mov	r1, r5
 8001f18:	028b      	lsls	r3, r1, #10
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f20:	4621      	mov	r1, r4
 8001f22:	028a      	lsls	r2, r1, #10
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f30:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f36:	f7fe f9c3 	bl	80002c0 <__aeabi_uldivmod>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4613      	mov	r3, r2
 8001f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x458>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	0f1b      	lsrs	r3, r3, #28
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 8001f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f62:	e003      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	37b8      	adds	r7, #184	; 0xb8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	00f42400 	.word	0x00f42400

08001f84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e28d      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8083 	beq.w	80020aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fa4:	4b94      	ldr	r3, [pc, #592]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d019      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001fb0:	4b91      	ldr	r3, [pc, #580]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
        || \
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001fbc:	4b8e      	ldr	r3, [pc, #568]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fca:	4b8b      	ldr	r3, [pc, #556]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d112      	bne.n	8001ffc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe2:	d10b      	bne.n	8001ffc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	4b84      	ldr	r3, [pc, #528]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d05b      	beq.n	80020a8 <HAL_RCC_OscConfig+0x124>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d157      	bne.n	80020a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e25a      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d106      	bne.n	8002014 <HAL_RCC_OscConfig+0x90>
 8002006:	4b7c      	ldr	r3, [pc, #496]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a7b      	ldr	r2, [pc, #492]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e01d      	b.n	8002050 <HAL_RCC_OscConfig+0xcc>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0xb4>
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a72      	ldr	r2, [pc, #456]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0xcc>
 8002038:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a6e      	ldr	r2, [pc, #440]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800203e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b6c      	ldr	r3, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a6b      	ldr	r2, [pc, #428]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800204a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff f94c 	bl	80012f4 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff f948 	bl	80012f4 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e21f      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b61      	ldr	r3, [pc, #388]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0xdc>
 800207e:	e014      	b.n	80020aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7ff f938 	bl	80012f4 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002088:	f7ff f934 	bl	80012f4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e20b      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x104>
 80020a6:	e000      	b.n	80020aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d06f      	beq.n	8002196 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020b6:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d017      	beq.n	80020f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80020c2:	4b4d      	ldr	r3, [pc, #308]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d105      	bne.n	80020da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e6:	4b44      	ldr	r3, [pc, #272]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x186>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1d3      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4937      	ldr	r1, [pc, #220]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e03a      	b.n	8002196 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_RCC_OscConfig+0x278>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7ff f8e1 	bl	80012f4 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002136:	f7ff f8dd 	bl	80012f4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1b4      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4925      	ldr	r1, [pc, #148]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_OscConfig+0x278>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7ff f8c0 	bl	80012f4 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002178:	f7ff f8bc 	bl	80012f4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e193      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d036      	beq.n	8002210 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_RCC_OscConfig+0x27c>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7ff f8a0 	bl	80012f4 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b8:	f7ff f89c 	bl	80012f4 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e173      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 80021cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x234>
 80021d6:	e01b      	b.n	8002210 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_OscConfig+0x27c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021de:	f7ff f889 	bl	80012f4 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	e00e      	b.n	8002204 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e6:	f7ff f885 	bl	80012f4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d907      	bls.n	8002204 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e15c      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
 80021f8:	40023800 	.word	0x40023800
 80021fc:	42470000 	.word	0x42470000
 8002200:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	4b8a      	ldr	r3, [pc, #552]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ea      	bne.n	80021e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8097 	beq.w	800234c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b83      	ldr	r3, [pc, #524]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10f      	bne.n	800224e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b7f      	ldr	r3, [pc, #508]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a7e      	ldr	r2, [pc, #504]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	4b79      	ldr	r3, [pc, #484]	; (8002434 <HAL_RCC_OscConfig+0x4b0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d118      	bne.n	800228c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225a:	4b76      	ldr	r3, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x4b0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a75      	ldr	r2, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x4b0>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002266:	f7ff f845 	bl	80012f4 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226e:	f7ff f841 	bl	80012f4 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e118      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b6c      	ldr	r3, [pc, #432]	; (8002434 <HAL_RCC_OscConfig+0x4b0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x31e>
 8002294:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a65      	ldr	r2, [pc, #404]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
 80022a0:	e01c      	b.n	80022dc <HAL_RCC_OscConfig+0x358>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x340>
 80022aa:	4b61      	ldr	r3, [pc, #388]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a60      	ldr	r2, [pc, #384]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
 80022b6:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a5d      	ldr	r2, [pc, #372]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0x358>
 80022c4:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	4a59      	ldr	r2, [pc, #356]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6713      	str	r3, [r2, #112]	; 0x70
 80022d0:	4b57      	ldr	r3, [pc, #348]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	4a56      	ldr	r2, [pc, #344]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7ff f806 	bl	80012f4 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7ff f802 	bl	80012f4 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0d7      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	4b4b      	ldr	r3, [pc, #300]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0ee      	beq.n	80022ec <HAL_RCC_OscConfig+0x368>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7fe fff0 	bl	80012f4 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe ffec 	bl	80012f4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0c1      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232e:	4b40      	ldr	r3, [pc, #256]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ee      	bne.n	8002318 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002340:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	4a3a      	ldr	r2, [pc, #232]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80ad 	beq.w	80024b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002356:	4b36      	ldr	r3, [pc, #216]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d060      	beq.n	8002424 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d145      	bne.n	80023f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b33      	ldr	r3, [pc, #204]	; (8002438 <HAL_RCC_OscConfig+0x4b4>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe ffc0 	bl	80012f4 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe ffbc 	bl	80012f4 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e093      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	3b01      	subs	r3, #1
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	071b      	lsls	r3, r3, #28
 80023c2:	491b      	ldr	r1, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCC_OscConfig+0x4b4>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7fe ff91 	bl	80012f4 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe ff8d 	bl	80012f4 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e064      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x452>
 80023f4:	e05c      	b.n	80024b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCC_OscConfig+0x4b4>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe ff7a 	bl	80012f4 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe ff76 	bl	80012f4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e04d      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_OscConfig+0x4ac>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x480>
 8002422:	e045      	b.n	80024b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d107      	bne.n	800243c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e040      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
 8002430:	40023800 	.word	0x40023800
 8002434:	40007000 	.word	0x40007000
 8002438:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_RCC_OscConfig+0x538>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d030      	beq.n	80024ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d129      	bne.n	80024ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d122      	bne.n	80024ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800246c:	4013      	ands	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002472:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002474:	4293      	cmp	r3, r2
 8002476:	d119      	bne.n	80024ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	3b01      	subs	r3, #1
 8002486:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d10f      	bne.n	80024ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d107      	bne.n	80024ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e042      	b.n	8002558 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe fd84 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2224      	movs	r2, #36	; 0x24
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fa09 	bl	800291c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b20      	cmp	r3, #32
 800257e:	d175      	bne.n	800266c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_UART_Transmit+0x2c>
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e06e      	b.n	800266e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2221      	movs	r2, #33	; 0x21
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800259e:	f7fe fea9 	bl	80012f4 <HAL_GetTick>
 80025a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	88fa      	ldrh	r2, [r7, #6]
 80025a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	88fa      	ldrh	r2, [r7, #6]
 80025ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b8:	d108      	bne.n	80025cc <HAL_UART_Transmit+0x6c>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d104      	bne.n	80025cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	e003      	b.n	80025d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025d4:	e02e      	b.n	8002634 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2200      	movs	r2, #0
 80025de:	2180      	movs	r1, #128	; 0x80
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f8df 	bl	80027a4 <UART_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e03a      	b.n	800266e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10b      	bne.n	8002616 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800260c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	3302      	adds	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	e007      	b.n	8002626 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	781a      	ldrb	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3301      	adds	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1cb      	bne.n	80025d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2200      	movs	r2, #0
 8002646:	2140      	movs	r1, #64	; 0x40
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f8ab 	bl	80027a4 <UART_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e006      	b.n	800266e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b08a      	sub	sp, #40	; 0x28
 800267a:	af02      	add	r7, sp, #8
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	4613      	mov	r3, r2
 8002684:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b20      	cmp	r3, #32
 8002694:	f040 8081 	bne.w	800279a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_UART_Receive+0x2e>
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e079      	b.n	800279c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2222      	movs	r2, #34	; 0x22
 80026b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026bc:	f7fe fe1a 	bl	80012f4 <HAL_GetTick>
 80026c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d6:	d108      	bne.n	80026ea <HAL_UART_Receive+0x74>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d104      	bne.n	80026ea <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	e003      	b.n	80026f2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026f2:	e047      	b.n	8002784 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2120      	movs	r1, #32
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f850 	bl	80027a4 <UART_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e042      	b.n	800279c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10c      	bne.n	8002736 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	b29b      	uxth	r3, r3
 8002724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002728:	b29a      	uxth	r2, r3
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	3302      	adds	r3, #2
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e01f      	b.n	8002776 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273e:	d007      	beq.n	8002750 <HAL_UART_Receive+0xda>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <HAL_UART_Receive+0xe8>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e008      	b.n	8002770 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800276a:	b2da      	uxtb	r2, r3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3301      	adds	r3, #1
 8002774:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1b2      	bne.n	80026f4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b4:	e03b      	b.n	800282e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d037      	beq.n	800282e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027be:	f7fe fd99 	bl	80012f4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	6a3a      	ldr	r2, [r7, #32]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e03a      	b.n	800284e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d023      	beq.n	800282e <UART_WaitOnFlagUntilTimeout+0x8a>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b80      	cmp	r3, #128	; 0x80
 80027ea:	d020      	beq.n	800282e <UART_WaitOnFlagUntilTimeout+0x8a>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b40      	cmp	r3, #64	; 0x40
 80027f0:	d01d      	beq.n	800282e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d116      	bne.n	800282e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f81d 	bl	8002856 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2208      	movs	r2, #8
 8002820:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4013      	ands	r3, r2
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	429a      	cmp	r2, r3
 800284a:	d0b4      	beq.n	80027b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002856:	b480      	push	{r7}
 8002858:	b095      	sub	sp, #84	; 0x54
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	330c      	adds	r3, #12
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002874:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	330c      	adds	r3, #12
 800287c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800287e:	643a      	str	r2, [r7, #64]	; 0x40
 8002880:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002882:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002886:	e841 2300 	strex	r3, r2, [r1]
 800288a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e5      	bne.n	800285e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3314      	adds	r3, #20
 8002898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3314      	adds	r3, #20
 80028b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ba:	e841 2300 	strex	r3, r2, [r1]
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1e5      	bne.n	8002892 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d119      	bne.n	8002902 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	330c      	adds	r3, #12
 80028d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	e853 3f00 	ldrex	r3, [r3]
 80028dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f023 0310 	bic.w	r3, r3, #16
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	330c      	adds	r3, #12
 80028ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028ee:	61ba      	str	r2, [r7, #24]
 80028f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f2:	6979      	ldr	r1, [r7, #20]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	e841 2300 	strex	r3, r2, [r1]
 80028fa:	613b      	str	r3, [r7, #16]
   return(result);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1e5      	bne.n	80028ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002910:	bf00      	nop
 8002912:	3754      	adds	r7, #84	; 0x54
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800291c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002920:	b0c0      	sub	sp, #256	; 0x100
 8002922:	af00      	add	r7, sp, #0
 8002924:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	68d9      	ldr	r1, [r3, #12]
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	ea40 0301 	orr.w	r3, r0, r1
 8002944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	431a      	orrs	r2, r3
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	431a      	orrs	r2, r3
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002974:	f021 010c 	bic.w	r1, r1, #12
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002982:	430b      	orrs	r3, r1
 8002984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	6999      	ldr	r1, [r3, #24]
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	ea40 0301 	orr.w	r3, r0, r1
 80029a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b8f      	ldr	r3, [pc, #572]	; (8002be8 <UART_SetConfig+0x2cc>)
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d005      	beq.n	80029bc <UART_SetConfig+0xa0>
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b8d      	ldr	r3, [pc, #564]	; (8002bec <UART_SetConfig+0x2d0>)
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d104      	bne.n	80029c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029bc:	f7ff f89e 	bl	8001afc <HAL_RCC_GetPCLK2Freq>
 80029c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029c4:	e003      	b.n	80029ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029c6:	f7ff f885 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 80029ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d8:	f040 810c 	bne.w	8002bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029ee:	4622      	mov	r2, r4
 80029f0:	462b      	mov	r3, r5
 80029f2:	1891      	adds	r1, r2, r2
 80029f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80029f6:	415b      	adcs	r3, r3
 80029f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029fe:	4621      	mov	r1, r4
 8002a00:	eb12 0801 	adds.w	r8, r2, r1
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb43 0901 	adc.w	r9, r3, r1
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a1e:	4690      	mov	r8, r2
 8002a20:	4699      	mov	r9, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	eb18 0303 	adds.w	r3, r8, r3
 8002a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	eb49 0303 	adc.w	r3, r9, r3
 8002a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	18db      	adds	r3, r3, r3
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a50:	4613      	mov	r3, r2
 8002a52:	eb42 0303 	adc.w	r3, r2, r3
 8002a56:	657b      	str	r3, [r7, #84]	; 0x54
 8002a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a60:	f7fd fc2e 	bl	80002c0 <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	011c      	lsls	r4, r3, #4
 8002a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a94:	4641      	mov	r1, r8
 8002a96:	eb12 0a01 	adds.w	sl, r2, r1
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab4:	4692      	mov	sl, r2
 8002ab6:	469b      	mov	fp, r3
 8002ab8:	4643      	mov	r3, r8
 8002aba:	eb1a 0303 	adds.w	r3, sl, r3
 8002abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	18db      	adds	r3, r3, r3
 8002ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	eb42 0303 	adc.w	r3, r2, r3
 8002aec:	647b      	str	r3, [r7, #68]	; 0x44
 8002aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002af6:	f7fd fbe3 	bl	80002c0 <__aeabi_uldivmod>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002b02:	fba3 2301 	umull	r2, r3, r3, r1
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2264      	movs	r2, #100	; 0x64
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	1acb      	subs	r3, r1, r3
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002b18:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b24:	441c      	add	r4, r3
 8002b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b38:	4642      	mov	r2, r8
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	1891      	adds	r1, r2, r2
 8002b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b40:	415b      	adcs	r3, r3
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b48:	4641      	mov	r1, r8
 8002b4a:	1851      	adds	r1, r2, r1
 8002b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8002b4e:	4649      	mov	r1, r9
 8002b50:	414b      	adcs	r3, r1
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b60:	4659      	mov	r1, fp
 8002b62:	00cb      	lsls	r3, r1, #3
 8002b64:	4651      	mov	r1, sl
 8002b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	00ca      	lsls	r2, r1, #3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	4642      	mov	r2, r8
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b7c:	464b      	mov	r3, r9
 8002b7e:	460a      	mov	r2, r1
 8002b80:	eb42 0303 	adc.w	r3, r2, r3
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	18db      	adds	r3, r3, r3
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	eb42 0303 	adc.w	r3, r2, r3
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bb2:	f7fd fb85 	bl	80002c0 <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	2164      	movs	r1, #100	; 0x64
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	3332      	adds	r3, #50	; 0x32
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	f003 0207 	and.w	r2, r3, #7
 8002bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4422      	add	r2, r4
 8002be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002be4:	e106      	b.n	8002df4 <UART_SetConfig+0x4d8>
 8002be6:	bf00      	nop
 8002be8:	40011000 	.word	0x40011000
 8002bec:	40011400 	.word	0x40011400
 8002bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c06:	4642      	mov	r2, r8
 8002c08:	464b      	mov	r3, r9
 8002c0a:	1891      	adds	r1, r2, r2
 8002c0c:	6239      	str	r1, [r7, #32]
 8002c0e:	415b      	adcs	r3, r3
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
 8002c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c16:	4641      	mov	r1, r8
 8002c18:	1854      	adds	r4, r2, r1
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	eb43 0501 	adc.w	r5, r3, r1
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	00eb      	lsls	r3, r5, #3
 8002c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2e:	00e2      	lsls	r2, r4, #3
 8002c30:	4614      	mov	r4, r2
 8002c32:	461d      	mov	r5, r3
 8002c34:	4643      	mov	r3, r8
 8002c36:	18e3      	adds	r3, r4, r3
 8002c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	eb45 0303 	adc.w	r3, r5, r3
 8002c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c62:	4629      	mov	r1, r5
 8002c64:	008b      	lsls	r3, r1, #2
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	008a      	lsls	r2, r1, #2
 8002c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c74:	f7fd fb24 	bl	80002c0 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4b60      	ldr	r3, [pc, #384]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	011c      	lsls	r4, r3, #4
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	1891      	adds	r1, r2, r2
 8002c9e:	61b9      	str	r1, [r7, #24]
 8002ca0:	415b      	adcs	r3, r3
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca8:	4641      	mov	r1, r8
 8002caa:	1851      	adds	r1, r2, r1
 8002cac:	6139      	str	r1, [r7, #16]
 8002cae:	4649      	mov	r1, r9
 8002cb0:	414b      	adcs	r3, r1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	00cb      	lsls	r3, r1, #3
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cca:	4651      	mov	r1, sl
 8002ccc:	00ca      	lsls	r2, r1, #3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cdc:	464b      	mov	r3, r9
 8002cde:	460a      	mov	r2, r1
 8002ce0:	eb42 0303 	adc.w	r3, r2, r3
 8002ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d00:	4649      	mov	r1, r9
 8002d02:	008b      	lsls	r3, r1, #2
 8002d04:	4641      	mov	r1, r8
 8002d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0a:	4641      	mov	r1, r8
 8002d0c:	008a      	lsls	r2, r1, #2
 8002d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d12:	f7fd fad5 	bl	80002c0 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2264      	movs	r2, #100	; 0x64
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	1acb      	subs	r3, r1, r3
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	3332      	adds	r3, #50	; 0x32
 8002d30:	4a33      	ldr	r2, [pc, #204]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3c:	441c      	add	r4, r3
 8002d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d42:	2200      	movs	r2, #0
 8002d44:	673b      	str	r3, [r7, #112]	; 0x70
 8002d46:	677a      	str	r2, [r7, #116]	; 0x74
 8002d48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	464b      	mov	r3, r9
 8002d50:	1891      	adds	r1, r2, r2
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	415b      	adcs	r3, r3
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	1851      	adds	r1, r2, r1
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	4649      	mov	r1, r9
 8002d64:	414b      	adcs	r3, r1
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d74:	4659      	mov	r1, fp
 8002d76:	00cb      	lsls	r3, r1, #3
 8002d78:	4651      	mov	r1, sl
 8002d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7e:	4651      	mov	r1, sl
 8002d80:	00ca      	lsls	r2, r1, #3
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	4642      	mov	r2, r8
 8002d8a:	189b      	adds	r3, r3, r2
 8002d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d8e:	464b      	mov	r3, r9
 8002d90:	460a      	mov	r2, r1
 8002d92:	eb42 0303 	adc.w	r3, r2, r3
 8002d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	663b      	str	r3, [r7, #96]	; 0x60
 8002da2:	667a      	str	r2, [r7, #100]	; 0x64
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002db0:	4649      	mov	r1, r9
 8002db2:	008b      	lsls	r3, r1, #2
 8002db4:	4641      	mov	r1, r8
 8002db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dba:	4641      	mov	r1, r8
 8002dbc:	008a      	lsls	r2, r1, #2
 8002dbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dc2:	f7fd fa7d 	bl	80002c0 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	2164      	movs	r1, #100	; 0x64
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	3332      	adds	r3, #50	; 0x32
 8002dde:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	f003 020f 	and.w	r2, r3, #15
 8002dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4422      	add	r2, r4
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e00:	51eb851f 	.word	0x51eb851f

08002e04 <_vsiprintf_r>:
 8002e04:	b500      	push	{lr}
 8002e06:	b09b      	sub	sp, #108	; 0x6c
 8002e08:	9100      	str	r1, [sp, #0]
 8002e0a:	9104      	str	r1, [sp, #16]
 8002e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e10:	9105      	str	r1, [sp, #20]
 8002e12:	9102      	str	r1, [sp, #8]
 8002e14:	4905      	ldr	r1, [pc, #20]	; (8002e2c <_vsiprintf_r+0x28>)
 8002e16:	9103      	str	r1, [sp, #12]
 8002e18:	4669      	mov	r1, sp
 8002e1a:	f000 f999 	bl	8003150 <_svfiprintf_r>
 8002e1e:	9b00      	ldr	r3, [sp, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	b01b      	add	sp, #108	; 0x6c
 8002e26:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e2a:	bf00      	nop
 8002e2c:	ffff0208 	.word	0xffff0208

08002e30 <vsiprintf>:
 8002e30:	4613      	mov	r3, r2
 8002e32:	460a      	mov	r2, r1
 8002e34:	4601      	mov	r1, r0
 8002e36:	4802      	ldr	r0, [pc, #8]	; (8002e40 <vsiprintf+0x10>)
 8002e38:	6800      	ldr	r0, [r0, #0]
 8002e3a:	f7ff bfe3 	b.w	8002e04 <_vsiprintf_r>
 8002e3e:	bf00      	nop
 8002e40:	20000060 	.word	0x20000060

08002e44 <memset>:
 8002e44:	4402      	add	r2, r0
 8002e46:	4603      	mov	r3, r0
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <memset+0xa>
 8002e4c:	4770      	bx	lr
 8002e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e52:	e7f9      	b.n	8002e48 <memset+0x4>

08002e54 <__errno>:
 8002e54:	4b01      	ldr	r3, [pc, #4]	; (8002e5c <__errno+0x8>)
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000060 	.word	0x20000060

08002e60 <__libc_init_array>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	4d0d      	ldr	r5, [pc, #52]	; (8002e98 <__libc_init_array+0x38>)
 8002e64:	4c0d      	ldr	r4, [pc, #52]	; (8002e9c <__libc_init_array+0x3c>)
 8002e66:	1b64      	subs	r4, r4, r5
 8002e68:	10a4      	asrs	r4, r4, #2
 8002e6a:	2600      	movs	r6, #0
 8002e6c:	42a6      	cmp	r6, r4
 8002e6e:	d109      	bne.n	8002e84 <__libc_init_array+0x24>
 8002e70:	4d0b      	ldr	r5, [pc, #44]	; (8002ea0 <__libc_init_array+0x40>)
 8002e72:	4c0c      	ldr	r4, [pc, #48]	; (8002ea4 <__libc_init_array+0x44>)
 8002e74:	f000 fc6a 	bl	800374c <_init>
 8002e78:	1b64      	subs	r4, r4, r5
 8002e7a:	10a4      	asrs	r4, r4, #2
 8002e7c:	2600      	movs	r6, #0
 8002e7e:	42a6      	cmp	r6, r4
 8002e80:	d105      	bne.n	8002e8e <__libc_init_array+0x2e>
 8002e82:	bd70      	pop	{r4, r5, r6, pc}
 8002e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e88:	4798      	blx	r3
 8002e8a:	3601      	adds	r6, #1
 8002e8c:	e7ee      	b.n	8002e6c <__libc_init_array+0xc>
 8002e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e92:	4798      	blx	r3
 8002e94:	3601      	adds	r6, #1
 8002e96:	e7f2      	b.n	8002e7e <__libc_init_array+0x1e>
 8002e98:	08003aa4 	.word	0x08003aa4
 8002e9c:	08003aa4 	.word	0x08003aa4
 8002ea0:	08003aa4 	.word	0x08003aa4
 8002ea4:	08003aa8 	.word	0x08003aa8

08002ea8 <__retarget_lock_acquire_recursive>:
 8002ea8:	4770      	bx	lr

08002eaa <__retarget_lock_release_recursive>:
 8002eaa:	4770      	bx	lr

08002eac <_free_r>:
 8002eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002eae:	2900      	cmp	r1, #0
 8002eb0:	d044      	beq.n	8002f3c <_free_r+0x90>
 8002eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eb6:	9001      	str	r0, [sp, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f1a1 0404 	sub.w	r4, r1, #4
 8002ebe:	bfb8      	it	lt
 8002ec0:	18e4      	addlt	r4, r4, r3
 8002ec2:	f000 f8df 	bl	8003084 <__malloc_lock>
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <_free_r+0x94>)
 8002ec8:	9801      	ldr	r0, [sp, #4]
 8002eca:	6813      	ldr	r3, [r2, #0]
 8002ecc:	b933      	cbnz	r3, 8002edc <_free_r+0x30>
 8002ece:	6063      	str	r3, [r4, #4]
 8002ed0:	6014      	str	r4, [r2, #0]
 8002ed2:	b003      	add	sp, #12
 8002ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ed8:	f000 b8da 	b.w	8003090 <__malloc_unlock>
 8002edc:	42a3      	cmp	r3, r4
 8002ede:	d908      	bls.n	8002ef2 <_free_r+0x46>
 8002ee0:	6825      	ldr	r5, [r4, #0]
 8002ee2:	1961      	adds	r1, r4, r5
 8002ee4:	428b      	cmp	r3, r1
 8002ee6:	bf01      	itttt	eq
 8002ee8:	6819      	ldreq	r1, [r3, #0]
 8002eea:	685b      	ldreq	r3, [r3, #4]
 8002eec:	1949      	addeq	r1, r1, r5
 8002eee:	6021      	streq	r1, [r4, #0]
 8002ef0:	e7ed      	b.n	8002ece <_free_r+0x22>
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	b10b      	cbz	r3, 8002efc <_free_r+0x50>
 8002ef8:	42a3      	cmp	r3, r4
 8002efa:	d9fa      	bls.n	8002ef2 <_free_r+0x46>
 8002efc:	6811      	ldr	r1, [r2, #0]
 8002efe:	1855      	adds	r5, r2, r1
 8002f00:	42a5      	cmp	r5, r4
 8002f02:	d10b      	bne.n	8002f1c <_free_r+0x70>
 8002f04:	6824      	ldr	r4, [r4, #0]
 8002f06:	4421      	add	r1, r4
 8002f08:	1854      	adds	r4, r2, r1
 8002f0a:	42a3      	cmp	r3, r4
 8002f0c:	6011      	str	r1, [r2, #0]
 8002f0e:	d1e0      	bne.n	8002ed2 <_free_r+0x26>
 8002f10:	681c      	ldr	r4, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	6053      	str	r3, [r2, #4]
 8002f16:	440c      	add	r4, r1
 8002f18:	6014      	str	r4, [r2, #0]
 8002f1a:	e7da      	b.n	8002ed2 <_free_r+0x26>
 8002f1c:	d902      	bls.n	8002f24 <_free_r+0x78>
 8002f1e:	230c      	movs	r3, #12
 8002f20:	6003      	str	r3, [r0, #0]
 8002f22:	e7d6      	b.n	8002ed2 <_free_r+0x26>
 8002f24:	6825      	ldr	r5, [r4, #0]
 8002f26:	1961      	adds	r1, r4, r5
 8002f28:	428b      	cmp	r3, r1
 8002f2a:	bf04      	itt	eq
 8002f2c:	6819      	ldreq	r1, [r3, #0]
 8002f2e:	685b      	ldreq	r3, [r3, #4]
 8002f30:	6063      	str	r3, [r4, #4]
 8002f32:	bf04      	itt	eq
 8002f34:	1949      	addeq	r1, r1, r5
 8002f36:	6021      	streq	r1, [r4, #0]
 8002f38:	6054      	str	r4, [r2, #4]
 8002f3a:	e7ca      	b.n	8002ed2 <_free_r+0x26>
 8002f3c:	b003      	add	sp, #12
 8002f3e:	bd30      	pop	{r4, r5, pc}
 8002f40:	20000328 	.word	0x20000328

08002f44 <sbrk_aligned>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	4e0e      	ldr	r6, [pc, #56]	; (8002f80 <sbrk_aligned+0x3c>)
 8002f48:	460c      	mov	r4, r1
 8002f4a:	6831      	ldr	r1, [r6, #0]
 8002f4c:	4605      	mov	r5, r0
 8002f4e:	b911      	cbnz	r1, 8002f56 <sbrk_aligned+0x12>
 8002f50:	f000 fba6 	bl	80036a0 <_sbrk_r>
 8002f54:	6030      	str	r0, [r6, #0]
 8002f56:	4621      	mov	r1, r4
 8002f58:	4628      	mov	r0, r5
 8002f5a:	f000 fba1 	bl	80036a0 <_sbrk_r>
 8002f5e:	1c43      	adds	r3, r0, #1
 8002f60:	d00a      	beq.n	8002f78 <sbrk_aligned+0x34>
 8002f62:	1cc4      	adds	r4, r0, #3
 8002f64:	f024 0403 	bic.w	r4, r4, #3
 8002f68:	42a0      	cmp	r0, r4
 8002f6a:	d007      	beq.n	8002f7c <sbrk_aligned+0x38>
 8002f6c:	1a21      	subs	r1, r4, r0
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f000 fb96 	bl	80036a0 <_sbrk_r>
 8002f74:	3001      	adds	r0, #1
 8002f76:	d101      	bne.n	8002f7c <sbrk_aligned+0x38>
 8002f78:	f04f 34ff 	mov.w	r4, #4294967295
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}
 8002f80:	2000032c 	.word	0x2000032c

08002f84 <_malloc_r>:
 8002f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f88:	1ccd      	adds	r5, r1, #3
 8002f8a:	f025 0503 	bic.w	r5, r5, #3
 8002f8e:	3508      	adds	r5, #8
 8002f90:	2d0c      	cmp	r5, #12
 8002f92:	bf38      	it	cc
 8002f94:	250c      	movcc	r5, #12
 8002f96:	2d00      	cmp	r5, #0
 8002f98:	4607      	mov	r7, r0
 8002f9a:	db01      	blt.n	8002fa0 <_malloc_r+0x1c>
 8002f9c:	42a9      	cmp	r1, r5
 8002f9e:	d905      	bls.n	8002fac <_malloc_r+0x28>
 8002fa0:	230c      	movs	r3, #12
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003080 <_malloc_r+0xfc>
 8002fb0:	f000 f868 	bl	8003084 <__malloc_lock>
 8002fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8002fb8:	461c      	mov	r4, r3
 8002fba:	bb5c      	cbnz	r4, 8003014 <_malloc_r+0x90>
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	4638      	mov	r0, r7
 8002fc0:	f7ff ffc0 	bl	8002f44 <sbrk_aligned>
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	d155      	bne.n	8003076 <_malloc_r+0xf2>
 8002fca:	f8d8 4000 	ldr.w	r4, [r8]
 8002fce:	4626      	mov	r6, r4
 8002fd0:	2e00      	cmp	r6, #0
 8002fd2:	d145      	bne.n	8003060 <_malloc_r+0xdc>
 8002fd4:	2c00      	cmp	r4, #0
 8002fd6:	d048      	beq.n	800306a <_malloc_r+0xe6>
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	4631      	mov	r1, r6
 8002fdc:	4638      	mov	r0, r7
 8002fde:	eb04 0903 	add.w	r9, r4, r3
 8002fe2:	f000 fb5d 	bl	80036a0 <_sbrk_r>
 8002fe6:	4581      	cmp	r9, r0
 8002fe8:	d13f      	bne.n	800306a <_malloc_r+0xe6>
 8002fea:	6821      	ldr	r1, [r4, #0]
 8002fec:	1a6d      	subs	r5, r5, r1
 8002fee:	4629      	mov	r1, r5
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f7ff ffa7 	bl	8002f44 <sbrk_aligned>
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	d037      	beq.n	800306a <_malloc_r+0xe6>
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	442b      	add	r3, r5
 8002ffe:	6023      	str	r3, [r4, #0]
 8003000:	f8d8 3000 	ldr.w	r3, [r8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d038      	beq.n	800307a <_malloc_r+0xf6>
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	42a2      	cmp	r2, r4
 800300c:	d12b      	bne.n	8003066 <_malloc_r+0xe2>
 800300e:	2200      	movs	r2, #0
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	e00f      	b.n	8003034 <_malloc_r+0xb0>
 8003014:	6822      	ldr	r2, [r4, #0]
 8003016:	1b52      	subs	r2, r2, r5
 8003018:	d41f      	bmi.n	800305a <_malloc_r+0xd6>
 800301a:	2a0b      	cmp	r2, #11
 800301c:	d917      	bls.n	800304e <_malloc_r+0xca>
 800301e:	1961      	adds	r1, r4, r5
 8003020:	42a3      	cmp	r3, r4
 8003022:	6025      	str	r5, [r4, #0]
 8003024:	bf18      	it	ne
 8003026:	6059      	strne	r1, [r3, #4]
 8003028:	6863      	ldr	r3, [r4, #4]
 800302a:	bf08      	it	eq
 800302c:	f8c8 1000 	streq.w	r1, [r8]
 8003030:	5162      	str	r2, [r4, r5]
 8003032:	604b      	str	r3, [r1, #4]
 8003034:	4638      	mov	r0, r7
 8003036:	f104 060b 	add.w	r6, r4, #11
 800303a:	f000 f829 	bl	8003090 <__malloc_unlock>
 800303e:	f026 0607 	bic.w	r6, r6, #7
 8003042:	1d23      	adds	r3, r4, #4
 8003044:	1af2      	subs	r2, r6, r3
 8003046:	d0ae      	beq.n	8002fa6 <_malloc_r+0x22>
 8003048:	1b9b      	subs	r3, r3, r6
 800304a:	50a3      	str	r3, [r4, r2]
 800304c:	e7ab      	b.n	8002fa6 <_malloc_r+0x22>
 800304e:	42a3      	cmp	r3, r4
 8003050:	6862      	ldr	r2, [r4, #4]
 8003052:	d1dd      	bne.n	8003010 <_malloc_r+0x8c>
 8003054:	f8c8 2000 	str.w	r2, [r8]
 8003058:	e7ec      	b.n	8003034 <_malloc_r+0xb0>
 800305a:	4623      	mov	r3, r4
 800305c:	6864      	ldr	r4, [r4, #4]
 800305e:	e7ac      	b.n	8002fba <_malloc_r+0x36>
 8003060:	4634      	mov	r4, r6
 8003062:	6876      	ldr	r6, [r6, #4]
 8003064:	e7b4      	b.n	8002fd0 <_malloc_r+0x4c>
 8003066:	4613      	mov	r3, r2
 8003068:	e7cc      	b.n	8003004 <_malloc_r+0x80>
 800306a:	230c      	movs	r3, #12
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	4638      	mov	r0, r7
 8003070:	f000 f80e 	bl	8003090 <__malloc_unlock>
 8003074:	e797      	b.n	8002fa6 <_malloc_r+0x22>
 8003076:	6025      	str	r5, [r4, #0]
 8003078:	e7dc      	b.n	8003034 <_malloc_r+0xb0>
 800307a:	605b      	str	r3, [r3, #4]
 800307c:	deff      	udf	#255	; 0xff
 800307e:	bf00      	nop
 8003080:	20000328 	.word	0x20000328

08003084 <__malloc_lock>:
 8003084:	4801      	ldr	r0, [pc, #4]	; (800308c <__malloc_lock+0x8>)
 8003086:	f7ff bf0f 	b.w	8002ea8 <__retarget_lock_acquire_recursive>
 800308a:	bf00      	nop
 800308c:	20000324 	.word	0x20000324

08003090 <__malloc_unlock>:
 8003090:	4801      	ldr	r0, [pc, #4]	; (8003098 <__malloc_unlock+0x8>)
 8003092:	f7ff bf0a 	b.w	8002eaa <__retarget_lock_release_recursive>
 8003096:	bf00      	nop
 8003098:	20000324 	.word	0x20000324

0800309c <__ssputs_r>:
 800309c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a0:	688e      	ldr	r6, [r1, #8]
 80030a2:	461f      	mov	r7, r3
 80030a4:	42be      	cmp	r6, r7
 80030a6:	680b      	ldr	r3, [r1, #0]
 80030a8:	4682      	mov	sl, r0
 80030aa:	460c      	mov	r4, r1
 80030ac:	4690      	mov	r8, r2
 80030ae:	d82c      	bhi.n	800310a <__ssputs_r+0x6e>
 80030b0:	898a      	ldrh	r2, [r1, #12]
 80030b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030b6:	d026      	beq.n	8003106 <__ssputs_r+0x6a>
 80030b8:	6965      	ldr	r5, [r4, #20]
 80030ba:	6909      	ldr	r1, [r1, #16]
 80030bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030c0:	eba3 0901 	sub.w	r9, r3, r1
 80030c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030c8:	1c7b      	adds	r3, r7, #1
 80030ca:	444b      	add	r3, r9
 80030cc:	106d      	asrs	r5, r5, #1
 80030ce:	429d      	cmp	r5, r3
 80030d0:	bf38      	it	cc
 80030d2:	461d      	movcc	r5, r3
 80030d4:	0553      	lsls	r3, r2, #21
 80030d6:	d527      	bpl.n	8003128 <__ssputs_r+0x8c>
 80030d8:	4629      	mov	r1, r5
 80030da:	f7ff ff53 	bl	8002f84 <_malloc_r>
 80030de:	4606      	mov	r6, r0
 80030e0:	b360      	cbz	r0, 800313c <__ssputs_r+0xa0>
 80030e2:	6921      	ldr	r1, [r4, #16]
 80030e4:	464a      	mov	r2, r9
 80030e6:	f000 faeb 	bl	80036c0 <memcpy>
 80030ea:	89a3      	ldrh	r3, [r4, #12]
 80030ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f4:	81a3      	strh	r3, [r4, #12]
 80030f6:	6126      	str	r6, [r4, #16]
 80030f8:	6165      	str	r5, [r4, #20]
 80030fa:	444e      	add	r6, r9
 80030fc:	eba5 0509 	sub.w	r5, r5, r9
 8003100:	6026      	str	r6, [r4, #0]
 8003102:	60a5      	str	r5, [r4, #8]
 8003104:	463e      	mov	r6, r7
 8003106:	42be      	cmp	r6, r7
 8003108:	d900      	bls.n	800310c <__ssputs_r+0x70>
 800310a:	463e      	mov	r6, r7
 800310c:	6820      	ldr	r0, [r4, #0]
 800310e:	4632      	mov	r2, r6
 8003110:	4641      	mov	r1, r8
 8003112:	f000 faab 	bl	800366c <memmove>
 8003116:	68a3      	ldr	r3, [r4, #8]
 8003118:	1b9b      	subs	r3, r3, r6
 800311a:	60a3      	str	r3, [r4, #8]
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	4433      	add	r3, r6
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	2000      	movs	r0, #0
 8003124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003128:	462a      	mov	r2, r5
 800312a:	f000 fad7 	bl	80036dc <_realloc_r>
 800312e:	4606      	mov	r6, r0
 8003130:	2800      	cmp	r0, #0
 8003132:	d1e0      	bne.n	80030f6 <__ssputs_r+0x5a>
 8003134:	6921      	ldr	r1, [r4, #16]
 8003136:	4650      	mov	r0, sl
 8003138:	f7ff feb8 	bl	8002eac <_free_r>
 800313c:	230c      	movs	r3, #12
 800313e:	f8ca 3000 	str.w	r3, [sl]
 8003142:	89a3      	ldrh	r3, [r4, #12]
 8003144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003148:	81a3      	strh	r3, [r4, #12]
 800314a:	f04f 30ff 	mov.w	r0, #4294967295
 800314e:	e7e9      	b.n	8003124 <__ssputs_r+0x88>

08003150 <_svfiprintf_r>:
 8003150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003154:	4698      	mov	r8, r3
 8003156:	898b      	ldrh	r3, [r1, #12]
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	b09d      	sub	sp, #116	; 0x74
 800315c:	4607      	mov	r7, r0
 800315e:	460d      	mov	r5, r1
 8003160:	4614      	mov	r4, r2
 8003162:	d50e      	bpl.n	8003182 <_svfiprintf_r+0x32>
 8003164:	690b      	ldr	r3, [r1, #16]
 8003166:	b963      	cbnz	r3, 8003182 <_svfiprintf_r+0x32>
 8003168:	2140      	movs	r1, #64	; 0x40
 800316a:	f7ff ff0b 	bl	8002f84 <_malloc_r>
 800316e:	6028      	str	r0, [r5, #0]
 8003170:	6128      	str	r0, [r5, #16]
 8003172:	b920      	cbnz	r0, 800317e <_svfiprintf_r+0x2e>
 8003174:	230c      	movs	r3, #12
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	e0d0      	b.n	8003320 <_svfiprintf_r+0x1d0>
 800317e:	2340      	movs	r3, #64	; 0x40
 8003180:	616b      	str	r3, [r5, #20]
 8003182:	2300      	movs	r3, #0
 8003184:	9309      	str	r3, [sp, #36]	; 0x24
 8003186:	2320      	movs	r3, #32
 8003188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800318c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003190:	2330      	movs	r3, #48	; 0x30
 8003192:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003338 <_svfiprintf_r+0x1e8>
 8003196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800319a:	f04f 0901 	mov.w	r9, #1
 800319e:	4623      	mov	r3, r4
 80031a0:	469a      	mov	sl, r3
 80031a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031a6:	b10a      	cbz	r2, 80031ac <_svfiprintf_r+0x5c>
 80031a8:	2a25      	cmp	r2, #37	; 0x25
 80031aa:	d1f9      	bne.n	80031a0 <_svfiprintf_r+0x50>
 80031ac:	ebba 0b04 	subs.w	fp, sl, r4
 80031b0:	d00b      	beq.n	80031ca <_svfiprintf_r+0x7a>
 80031b2:	465b      	mov	r3, fp
 80031b4:	4622      	mov	r2, r4
 80031b6:	4629      	mov	r1, r5
 80031b8:	4638      	mov	r0, r7
 80031ba:	f7ff ff6f 	bl	800309c <__ssputs_r>
 80031be:	3001      	adds	r0, #1
 80031c0:	f000 80a9 	beq.w	8003316 <_svfiprintf_r+0x1c6>
 80031c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031c6:	445a      	add	r2, fp
 80031c8:	9209      	str	r2, [sp, #36]	; 0x24
 80031ca:	f89a 3000 	ldrb.w	r3, [sl]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80a1 	beq.w	8003316 <_svfiprintf_r+0x1c6>
 80031d4:	2300      	movs	r3, #0
 80031d6:	f04f 32ff 	mov.w	r2, #4294967295
 80031da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031de:	f10a 0a01 	add.w	sl, sl, #1
 80031e2:	9304      	str	r3, [sp, #16]
 80031e4:	9307      	str	r3, [sp, #28]
 80031e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031ea:	931a      	str	r3, [sp, #104]	; 0x68
 80031ec:	4654      	mov	r4, sl
 80031ee:	2205      	movs	r2, #5
 80031f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031f4:	4850      	ldr	r0, [pc, #320]	; (8003338 <_svfiprintf_r+0x1e8>)
 80031f6:	f7fd f813 	bl	8000220 <memchr>
 80031fa:	9a04      	ldr	r2, [sp, #16]
 80031fc:	b9d8      	cbnz	r0, 8003236 <_svfiprintf_r+0xe6>
 80031fe:	06d0      	lsls	r0, r2, #27
 8003200:	bf44      	itt	mi
 8003202:	2320      	movmi	r3, #32
 8003204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003208:	0711      	lsls	r1, r2, #28
 800320a:	bf44      	itt	mi
 800320c:	232b      	movmi	r3, #43	; 0x2b
 800320e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003212:	f89a 3000 	ldrb.w	r3, [sl]
 8003216:	2b2a      	cmp	r3, #42	; 0x2a
 8003218:	d015      	beq.n	8003246 <_svfiprintf_r+0xf6>
 800321a:	9a07      	ldr	r2, [sp, #28]
 800321c:	4654      	mov	r4, sl
 800321e:	2000      	movs	r0, #0
 8003220:	f04f 0c0a 	mov.w	ip, #10
 8003224:	4621      	mov	r1, r4
 8003226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800322a:	3b30      	subs	r3, #48	; 0x30
 800322c:	2b09      	cmp	r3, #9
 800322e:	d94d      	bls.n	80032cc <_svfiprintf_r+0x17c>
 8003230:	b1b0      	cbz	r0, 8003260 <_svfiprintf_r+0x110>
 8003232:	9207      	str	r2, [sp, #28]
 8003234:	e014      	b.n	8003260 <_svfiprintf_r+0x110>
 8003236:	eba0 0308 	sub.w	r3, r0, r8
 800323a:	fa09 f303 	lsl.w	r3, r9, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	9304      	str	r3, [sp, #16]
 8003242:	46a2      	mov	sl, r4
 8003244:	e7d2      	b.n	80031ec <_svfiprintf_r+0x9c>
 8003246:	9b03      	ldr	r3, [sp, #12]
 8003248:	1d19      	adds	r1, r3, #4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	9103      	str	r1, [sp, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	bfbb      	ittet	lt
 8003252:	425b      	neglt	r3, r3
 8003254:	f042 0202 	orrlt.w	r2, r2, #2
 8003258:	9307      	strge	r3, [sp, #28]
 800325a:	9307      	strlt	r3, [sp, #28]
 800325c:	bfb8      	it	lt
 800325e:	9204      	strlt	r2, [sp, #16]
 8003260:	7823      	ldrb	r3, [r4, #0]
 8003262:	2b2e      	cmp	r3, #46	; 0x2e
 8003264:	d10c      	bne.n	8003280 <_svfiprintf_r+0x130>
 8003266:	7863      	ldrb	r3, [r4, #1]
 8003268:	2b2a      	cmp	r3, #42	; 0x2a
 800326a:	d134      	bne.n	80032d6 <_svfiprintf_r+0x186>
 800326c:	9b03      	ldr	r3, [sp, #12]
 800326e:	1d1a      	adds	r2, r3, #4
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	9203      	str	r2, [sp, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	bfb8      	it	lt
 8003278:	f04f 33ff 	movlt.w	r3, #4294967295
 800327c:	3402      	adds	r4, #2
 800327e:	9305      	str	r3, [sp, #20]
 8003280:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003348 <_svfiprintf_r+0x1f8>
 8003284:	7821      	ldrb	r1, [r4, #0]
 8003286:	2203      	movs	r2, #3
 8003288:	4650      	mov	r0, sl
 800328a:	f7fc ffc9 	bl	8000220 <memchr>
 800328e:	b138      	cbz	r0, 80032a0 <_svfiprintf_r+0x150>
 8003290:	9b04      	ldr	r3, [sp, #16]
 8003292:	eba0 000a 	sub.w	r0, r0, sl
 8003296:	2240      	movs	r2, #64	; 0x40
 8003298:	4082      	lsls	r2, r0
 800329a:	4313      	orrs	r3, r2
 800329c:	3401      	adds	r4, #1
 800329e:	9304      	str	r3, [sp, #16]
 80032a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032a4:	4825      	ldr	r0, [pc, #148]	; (800333c <_svfiprintf_r+0x1ec>)
 80032a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032aa:	2206      	movs	r2, #6
 80032ac:	f7fc ffb8 	bl	8000220 <memchr>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d038      	beq.n	8003326 <_svfiprintf_r+0x1d6>
 80032b4:	4b22      	ldr	r3, [pc, #136]	; (8003340 <_svfiprintf_r+0x1f0>)
 80032b6:	bb1b      	cbnz	r3, 8003300 <_svfiprintf_r+0x1b0>
 80032b8:	9b03      	ldr	r3, [sp, #12]
 80032ba:	3307      	adds	r3, #7
 80032bc:	f023 0307 	bic.w	r3, r3, #7
 80032c0:	3308      	adds	r3, #8
 80032c2:	9303      	str	r3, [sp, #12]
 80032c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032c6:	4433      	add	r3, r6
 80032c8:	9309      	str	r3, [sp, #36]	; 0x24
 80032ca:	e768      	b.n	800319e <_svfiprintf_r+0x4e>
 80032cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80032d0:	460c      	mov	r4, r1
 80032d2:	2001      	movs	r0, #1
 80032d4:	e7a6      	b.n	8003224 <_svfiprintf_r+0xd4>
 80032d6:	2300      	movs	r3, #0
 80032d8:	3401      	adds	r4, #1
 80032da:	9305      	str	r3, [sp, #20]
 80032dc:	4619      	mov	r1, r3
 80032de:	f04f 0c0a 	mov.w	ip, #10
 80032e2:	4620      	mov	r0, r4
 80032e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032e8:	3a30      	subs	r2, #48	; 0x30
 80032ea:	2a09      	cmp	r2, #9
 80032ec:	d903      	bls.n	80032f6 <_svfiprintf_r+0x1a6>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0c6      	beq.n	8003280 <_svfiprintf_r+0x130>
 80032f2:	9105      	str	r1, [sp, #20]
 80032f4:	e7c4      	b.n	8003280 <_svfiprintf_r+0x130>
 80032f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80032fa:	4604      	mov	r4, r0
 80032fc:	2301      	movs	r3, #1
 80032fe:	e7f0      	b.n	80032e2 <_svfiprintf_r+0x192>
 8003300:	ab03      	add	r3, sp, #12
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	462a      	mov	r2, r5
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <_svfiprintf_r+0x1f4>)
 8003308:	a904      	add	r1, sp, #16
 800330a:	4638      	mov	r0, r7
 800330c:	f3af 8000 	nop.w
 8003310:	1c42      	adds	r2, r0, #1
 8003312:	4606      	mov	r6, r0
 8003314:	d1d6      	bne.n	80032c4 <_svfiprintf_r+0x174>
 8003316:	89ab      	ldrh	r3, [r5, #12]
 8003318:	065b      	lsls	r3, r3, #25
 800331a:	f53f af2d 	bmi.w	8003178 <_svfiprintf_r+0x28>
 800331e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003320:	b01d      	add	sp, #116	; 0x74
 8003322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003326:	ab03      	add	r3, sp, #12
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	462a      	mov	r2, r5
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <_svfiprintf_r+0x1f4>)
 800332e:	a904      	add	r1, sp, #16
 8003330:	4638      	mov	r0, r7
 8003332:	f000 f879 	bl	8003428 <_printf_i>
 8003336:	e7eb      	b.n	8003310 <_svfiprintf_r+0x1c0>
 8003338:	08003a68 	.word	0x08003a68
 800333c:	08003a72 	.word	0x08003a72
 8003340:	00000000 	.word	0x00000000
 8003344:	0800309d 	.word	0x0800309d
 8003348:	08003a6e 	.word	0x08003a6e

0800334c <_printf_common>:
 800334c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003350:	4616      	mov	r6, r2
 8003352:	4699      	mov	r9, r3
 8003354:	688a      	ldr	r2, [r1, #8]
 8003356:	690b      	ldr	r3, [r1, #16]
 8003358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800335c:	4293      	cmp	r3, r2
 800335e:	bfb8      	it	lt
 8003360:	4613      	movlt	r3, r2
 8003362:	6033      	str	r3, [r6, #0]
 8003364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003368:	4607      	mov	r7, r0
 800336a:	460c      	mov	r4, r1
 800336c:	b10a      	cbz	r2, 8003372 <_printf_common+0x26>
 800336e:	3301      	adds	r3, #1
 8003370:	6033      	str	r3, [r6, #0]
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	0699      	lsls	r1, r3, #26
 8003376:	bf42      	ittt	mi
 8003378:	6833      	ldrmi	r3, [r6, #0]
 800337a:	3302      	addmi	r3, #2
 800337c:	6033      	strmi	r3, [r6, #0]
 800337e:	6825      	ldr	r5, [r4, #0]
 8003380:	f015 0506 	ands.w	r5, r5, #6
 8003384:	d106      	bne.n	8003394 <_printf_common+0x48>
 8003386:	f104 0a19 	add.w	sl, r4, #25
 800338a:	68e3      	ldr	r3, [r4, #12]
 800338c:	6832      	ldr	r2, [r6, #0]
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	42ab      	cmp	r3, r5
 8003392:	dc26      	bgt.n	80033e2 <_printf_common+0x96>
 8003394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003398:	1e13      	subs	r3, r2, #0
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	bf18      	it	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	0692      	lsls	r2, r2, #26
 80033a2:	d42b      	bmi.n	80033fc <_printf_common+0xb0>
 80033a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033a8:	4649      	mov	r1, r9
 80033aa:	4638      	mov	r0, r7
 80033ac:	47c0      	blx	r8
 80033ae:	3001      	adds	r0, #1
 80033b0:	d01e      	beq.n	80033f0 <_printf_common+0xa4>
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	6922      	ldr	r2, [r4, #16]
 80033b6:	f003 0306 	and.w	r3, r3, #6
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	bf02      	ittt	eq
 80033be:	68e5      	ldreq	r5, [r4, #12]
 80033c0:	6833      	ldreq	r3, [r6, #0]
 80033c2:	1aed      	subeq	r5, r5, r3
 80033c4:	68a3      	ldr	r3, [r4, #8]
 80033c6:	bf0c      	ite	eq
 80033c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033cc:	2500      	movne	r5, #0
 80033ce:	4293      	cmp	r3, r2
 80033d0:	bfc4      	itt	gt
 80033d2:	1a9b      	subgt	r3, r3, r2
 80033d4:	18ed      	addgt	r5, r5, r3
 80033d6:	2600      	movs	r6, #0
 80033d8:	341a      	adds	r4, #26
 80033da:	42b5      	cmp	r5, r6
 80033dc:	d11a      	bne.n	8003414 <_printf_common+0xc8>
 80033de:	2000      	movs	r0, #0
 80033e0:	e008      	b.n	80033f4 <_printf_common+0xa8>
 80033e2:	2301      	movs	r3, #1
 80033e4:	4652      	mov	r2, sl
 80033e6:	4649      	mov	r1, r9
 80033e8:	4638      	mov	r0, r7
 80033ea:	47c0      	blx	r8
 80033ec:	3001      	adds	r0, #1
 80033ee:	d103      	bne.n	80033f8 <_printf_common+0xac>
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f8:	3501      	adds	r5, #1
 80033fa:	e7c6      	b.n	800338a <_printf_common+0x3e>
 80033fc:	18e1      	adds	r1, r4, r3
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	2030      	movs	r0, #48	; 0x30
 8003402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003406:	4422      	add	r2, r4
 8003408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800340c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003410:	3302      	adds	r3, #2
 8003412:	e7c7      	b.n	80033a4 <_printf_common+0x58>
 8003414:	2301      	movs	r3, #1
 8003416:	4622      	mov	r2, r4
 8003418:	4649      	mov	r1, r9
 800341a:	4638      	mov	r0, r7
 800341c:	47c0      	blx	r8
 800341e:	3001      	adds	r0, #1
 8003420:	d0e6      	beq.n	80033f0 <_printf_common+0xa4>
 8003422:	3601      	adds	r6, #1
 8003424:	e7d9      	b.n	80033da <_printf_common+0x8e>
	...

08003428 <_printf_i>:
 8003428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800342c:	7e0f      	ldrb	r7, [r1, #24]
 800342e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003430:	2f78      	cmp	r7, #120	; 0x78
 8003432:	4691      	mov	r9, r2
 8003434:	4680      	mov	r8, r0
 8003436:	460c      	mov	r4, r1
 8003438:	469a      	mov	sl, r3
 800343a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800343e:	d807      	bhi.n	8003450 <_printf_i+0x28>
 8003440:	2f62      	cmp	r7, #98	; 0x62
 8003442:	d80a      	bhi.n	800345a <_printf_i+0x32>
 8003444:	2f00      	cmp	r7, #0
 8003446:	f000 80d4 	beq.w	80035f2 <_printf_i+0x1ca>
 800344a:	2f58      	cmp	r7, #88	; 0x58
 800344c:	f000 80c0 	beq.w	80035d0 <_printf_i+0x1a8>
 8003450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003458:	e03a      	b.n	80034d0 <_printf_i+0xa8>
 800345a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800345e:	2b15      	cmp	r3, #21
 8003460:	d8f6      	bhi.n	8003450 <_printf_i+0x28>
 8003462:	a101      	add	r1, pc, #4	; (adr r1, 8003468 <_printf_i+0x40>)
 8003464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003468:	080034c1 	.word	0x080034c1
 800346c:	080034d5 	.word	0x080034d5
 8003470:	08003451 	.word	0x08003451
 8003474:	08003451 	.word	0x08003451
 8003478:	08003451 	.word	0x08003451
 800347c:	08003451 	.word	0x08003451
 8003480:	080034d5 	.word	0x080034d5
 8003484:	08003451 	.word	0x08003451
 8003488:	08003451 	.word	0x08003451
 800348c:	08003451 	.word	0x08003451
 8003490:	08003451 	.word	0x08003451
 8003494:	080035d9 	.word	0x080035d9
 8003498:	08003501 	.word	0x08003501
 800349c:	08003593 	.word	0x08003593
 80034a0:	08003451 	.word	0x08003451
 80034a4:	08003451 	.word	0x08003451
 80034a8:	080035fb 	.word	0x080035fb
 80034ac:	08003451 	.word	0x08003451
 80034b0:	08003501 	.word	0x08003501
 80034b4:	08003451 	.word	0x08003451
 80034b8:	08003451 	.word	0x08003451
 80034bc:	0800359b 	.word	0x0800359b
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	1d1a      	adds	r2, r3, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	602a      	str	r2, [r5, #0]
 80034c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034d0:	2301      	movs	r3, #1
 80034d2:	e09f      	b.n	8003614 <_printf_i+0x1ec>
 80034d4:	6820      	ldr	r0, [r4, #0]
 80034d6:	682b      	ldr	r3, [r5, #0]
 80034d8:	0607      	lsls	r7, r0, #24
 80034da:	f103 0104 	add.w	r1, r3, #4
 80034de:	6029      	str	r1, [r5, #0]
 80034e0:	d501      	bpl.n	80034e6 <_printf_i+0xbe>
 80034e2:	681e      	ldr	r6, [r3, #0]
 80034e4:	e003      	b.n	80034ee <_printf_i+0xc6>
 80034e6:	0646      	lsls	r6, r0, #25
 80034e8:	d5fb      	bpl.n	80034e2 <_printf_i+0xba>
 80034ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80034ee:	2e00      	cmp	r6, #0
 80034f0:	da03      	bge.n	80034fa <_printf_i+0xd2>
 80034f2:	232d      	movs	r3, #45	; 0x2d
 80034f4:	4276      	negs	r6, r6
 80034f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034fa:	485a      	ldr	r0, [pc, #360]	; (8003664 <_printf_i+0x23c>)
 80034fc:	230a      	movs	r3, #10
 80034fe:	e012      	b.n	8003526 <_printf_i+0xfe>
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	1d19      	adds	r1, r3, #4
 8003506:	6029      	str	r1, [r5, #0]
 8003508:	0605      	lsls	r5, r0, #24
 800350a:	d501      	bpl.n	8003510 <_printf_i+0xe8>
 800350c:	681e      	ldr	r6, [r3, #0]
 800350e:	e002      	b.n	8003516 <_printf_i+0xee>
 8003510:	0641      	lsls	r1, r0, #25
 8003512:	d5fb      	bpl.n	800350c <_printf_i+0xe4>
 8003514:	881e      	ldrh	r6, [r3, #0]
 8003516:	4853      	ldr	r0, [pc, #332]	; (8003664 <_printf_i+0x23c>)
 8003518:	2f6f      	cmp	r7, #111	; 0x6f
 800351a:	bf0c      	ite	eq
 800351c:	2308      	moveq	r3, #8
 800351e:	230a      	movne	r3, #10
 8003520:	2100      	movs	r1, #0
 8003522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003526:	6865      	ldr	r5, [r4, #4]
 8003528:	60a5      	str	r5, [r4, #8]
 800352a:	2d00      	cmp	r5, #0
 800352c:	bfa2      	ittt	ge
 800352e:	6821      	ldrge	r1, [r4, #0]
 8003530:	f021 0104 	bicge.w	r1, r1, #4
 8003534:	6021      	strge	r1, [r4, #0]
 8003536:	b90e      	cbnz	r6, 800353c <_printf_i+0x114>
 8003538:	2d00      	cmp	r5, #0
 800353a:	d04b      	beq.n	80035d4 <_printf_i+0x1ac>
 800353c:	4615      	mov	r5, r2
 800353e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003542:	fb03 6711 	mls	r7, r3, r1, r6
 8003546:	5dc7      	ldrb	r7, [r0, r7]
 8003548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800354c:	4637      	mov	r7, r6
 800354e:	42bb      	cmp	r3, r7
 8003550:	460e      	mov	r6, r1
 8003552:	d9f4      	bls.n	800353e <_printf_i+0x116>
 8003554:	2b08      	cmp	r3, #8
 8003556:	d10b      	bne.n	8003570 <_printf_i+0x148>
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	07de      	lsls	r6, r3, #31
 800355c:	d508      	bpl.n	8003570 <_printf_i+0x148>
 800355e:	6923      	ldr	r3, [r4, #16]
 8003560:	6861      	ldr	r1, [r4, #4]
 8003562:	4299      	cmp	r1, r3
 8003564:	bfde      	ittt	le
 8003566:	2330      	movle	r3, #48	; 0x30
 8003568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800356c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003570:	1b52      	subs	r2, r2, r5
 8003572:	6122      	str	r2, [r4, #16]
 8003574:	f8cd a000 	str.w	sl, [sp]
 8003578:	464b      	mov	r3, r9
 800357a:	aa03      	add	r2, sp, #12
 800357c:	4621      	mov	r1, r4
 800357e:	4640      	mov	r0, r8
 8003580:	f7ff fee4 	bl	800334c <_printf_common>
 8003584:	3001      	adds	r0, #1
 8003586:	d14a      	bne.n	800361e <_printf_i+0x1f6>
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	b004      	add	sp, #16
 800358e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	f043 0320 	orr.w	r3, r3, #32
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	4833      	ldr	r0, [pc, #204]	; (8003668 <_printf_i+0x240>)
 800359c:	2778      	movs	r7, #120	; 0x78
 800359e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	6829      	ldr	r1, [r5, #0]
 80035a6:	061f      	lsls	r7, r3, #24
 80035a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80035ac:	d402      	bmi.n	80035b4 <_printf_i+0x18c>
 80035ae:	065f      	lsls	r7, r3, #25
 80035b0:	bf48      	it	mi
 80035b2:	b2b6      	uxthmi	r6, r6
 80035b4:	07df      	lsls	r7, r3, #31
 80035b6:	bf48      	it	mi
 80035b8:	f043 0320 	orrmi.w	r3, r3, #32
 80035bc:	6029      	str	r1, [r5, #0]
 80035be:	bf48      	it	mi
 80035c0:	6023      	strmi	r3, [r4, #0]
 80035c2:	b91e      	cbnz	r6, 80035cc <_printf_i+0x1a4>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	f023 0320 	bic.w	r3, r3, #32
 80035ca:	6023      	str	r3, [r4, #0]
 80035cc:	2310      	movs	r3, #16
 80035ce:	e7a7      	b.n	8003520 <_printf_i+0xf8>
 80035d0:	4824      	ldr	r0, [pc, #144]	; (8003664 <_printf_i+0x23c>)
 80035d2:	e7e4      	b.n	800359e <_printf_i+0x176>
 80035d4:	4615      	mov	r5, r2
 80035d6:	e7bd      	b.n	8003554 <_printf_i+0x12c>
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	6826      	ldr	r6, [r4, #0]
 80035dc:	6961      	ldr	r1, [r4, #20]
 80035de:	1d18      	adds	r0, r3, #4
 80035e0:	6028      	str	r0, [r5, #0]
 80035e2:	0635      	lsls	r5, r6, #24
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	d501      	bpl.n	80035ec <_printf_i+0x1c4>
 80035e8:	6019      	str	r1, [r3, #0]
 80035ea:	e002      	b.n	80035f2 <_printf_i+0x1ca>
 80035ec:	0670      	lsls	r0, r6, #25
 80035ee:	d5fb      	bpl.n	80035e8 <_printf_i+0x1c0>
 80035f0:	8019      	strh	r1, [r3, #0]
 80035f2:	2300      	movs	r3, #0
 80035f4:	6123      	str	r3, [r4, #16]
 80035f6:	4615      	mov	r5, r2
 80035f8:	e7bc      	b.n	8003574 <_printf_i+0x14c>
 80035fa:	682b      	ldr	r3, [r5, #0]
 80035fc:	1d1a      	adds	r2, r3, #4
 80035fe:	602a      	str	r2, [r5, #0]
 8003600:	681d      	ldr	r5, [r3, #0]
 8003602:	6862      	ldr	r2, [r4, #4]
 8003604:	2100      	movs	r1, #0
 8003606:	4628      	mov	r0, r5
 8003608:	f7fc fe0a 	bl	8000220 <memchr>
 800360c:	b108      	cbz	r0, 8003612 <_printf_i+0x1ea>
 800360e:	1b40      	subs	r0, r0, r5
 8003610:	6060      	str	r0, [r4, #4]
 8003612:	6863      	ldr	r3, [r4, #4]
 8003614:	6123      	str	r3, [r4, #16]
 8003616:	2300      	movs	r3, #0
 8003618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800361c:	e7aa      	b.n	8003574 <_printf_i+0x14c>
 800361e:	6923      	ldr	r3, [r4, #16]
 8003620:	462a      	mov	r2, r5
 8003622:	4649      	mov	r1, r9
 8003624:	4640      	mov	r0, r8
 8003626:	47d0      	blx	sl
 8003628:	3001      	adds	r0, #1
 800362a:	d0ad      	beq.n	8003588 <_printf_i+0x160>
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	079b      	lsls	r3, r3, #30
 8003630:	d413      	bmi.n	800365a <_printf_i+0x232>
 8003632:	68e0      	ldr	r0, [r4, #12]
 8003634:	9b03      	ldr	r3, [sp, #12]
 8003636:	4298      	cmp	r0, r3
 8003638:	bfb8      	it	lt
 800363a:	4618      	movlt	r0, r3
 800363c:	e7a6      	b.n	800358c <_printf_i+0x164>
 800363e:	2301      	movs	r3, #1
 8003640:	4632      	mov	r2, r6
 8003642:	4649      	mov	r1, r9
 8003644:	4640      	mov	r0, r8
 8003646:	47d0      	blx	sl
 8003648:	3001      	adds	r0, #1
 800364a:	d09d      	beq.n	8003588 <_printf_i+0x160>
 800364c:	3501      	adds	r5, #1
 800364e:	68e3      	ldr	r3, [r4, #12]
 8003650:	9903      	ldr	r1, [sp, #12]
 8003652:	1a5b      	subs	r3, r3, r1
 8003654:	42ab      	cmp	r3, r5
 8003656:	dcf2      	bgt.n	800363e <_printf_i+0x216>
 8003658:	e7eb      	b.n	8003632 <_printf_i+0x20a>
 800365a:	2500      	movs	r5, #0
 800365c:	f104 0619 	add.w	r6, r4, #25
 8003660:	e7f5      	b.n	800364e <_printf_i+0x226>
 8003662:	bf00      	nop
 8003664:	08003a79 	.word	0x08003a79
 8003668:	08003a8a 	.word	0x08003a8a

0800366c <memmove>:
 800366c:	4288      	cmp	r0, r1
 800366e:	b510      	push	{r4, lr}
 8003670:	eb01 0402 	add.w	r4, r1, r2
 8003674:	d902      	bls.n	800367c <memmove+0x10>
 8003676:	4284      	cmp	r4, r0
 8003678:	4623      	mov	r3, r4
 800367a:	d807      	bhi.n	800368c <memmove+0x20>
 800367c:	1e43      	subs	r3, r0, #1
 800367e:	42a1      	cmp	r1, r4
 8003680:	d008      	beq.n	8003694 <memmove+0x28>
 8003682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800368a:	e7f8      	b.n	800367e <memmove+0x12>
 800368c:	4402      	add	r2, r0
 800368e:	4601      	mov	r1, r0
 8003690:	428a      	cmp	r2, r1
 8003692:	d100      	bne.n	8003696 <memmove+0x2a>
 8003694:	bd10      	pop	{r4, pc}
 8003696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800369a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800369e:	e7f7      	b.n	8003690 <memmove+0x24>

080036a0 <_sbrk_r>:
 80036a0:	b538      	push	{r3, r4, r5, lr}
 80036a2:	4d06      	ldr	r5, [pc, #24]	; (80036bc <_sbrk_r+0x1c>)
 80036a4:	2300      	movs	r3, #0
 80036a6:	4604      	mov	r4, r0
 80036a8:	4608      	mov	r0, r1
 80036aa:	602b      	str	r3, [r5, #0]
 80036ac:	f7fd fd4a 	bl	8001144 <_sbrk>
 80036b0:	1c43      	adds	r3, r0, #1
 80036b2:	d102      	bne.n	80036ba <_sbrk_r+0x1a>
 80036b4:	682b      	ldr	r3, [r5, #0]
 80036b6:	b103      	cbz	r3, 80036ba <_sbrk_r+0x1a>
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	bd38      	pop	{r3, r4, r5, pc}
 80036bc:	20000320 	.word	0x20000320

080036c0 <memcpy>:
 80036c0:	440a      	add	r2, r1
 80036c2:	4291      	cmp	r1, r2
 80036c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036c8:	d100      	bne.n	80036cc <memcpy+0xc>
 80036ca:	4770      	bx	lr
 80036cc:	b510      	push	{r4, lr}
 80036ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036d6:	4291      	cmp	r1, r2
 80036d8:	d1f9      	bne.n	80036ce <memcpy+0xe>
 80036da:	bd10      	pop	{r4, pc}

080036dc <_realloc_r>:
 80036dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e0:	4680      	mov	r8, r0
 80036e2:	4614      	mov	r4, r2
 80036e4:	460e      	mov	r6, r1
 80036e6:	b921      	cbnz	r1, 80036f2 <_realloc_r+0x16>
 80036e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ec:	4611      	mov	r1, r2
 80036ee:	f7ff bc49 	b.w	8002f84 <_malloc_r>
 80036f2:	b92a      	cbnz	r2, 8003700 <_realloc_r+0x24>
 80036f4:	f7ff fbda 	bl	8002eac <_free_r>
 80036f8:	4625      	mov	r5, r4
 80036fa:	4628      	mov	r0, r5
 80036fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003700:	f000 f81b 	bl	800373a <_malloc_usable_size_r>
 8003704:	4284      	cmp	r4, r0
 8003706:	4607      	mov	r7, r0
 8003708:	d802      	bhi.n	8003710 <_realloc_r+0x34>
 800370a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800370e:	d812      	bhi.n	8003736 <_realloc_r+0x5a>
 8003710:	4621      	mov	r1, r4
 8003712:	4640      	mov	r0, r8
 8003714:	f7ff fc36 	bl	8002f84 <_malloc_r>
 8003718:	4605      	mov	r5, r0
 800371a:	2800      	cmp	r0, #0
 800371c:	d0ed      	beq.n	80036fa <_realloc_r+0x1e>
 800371e:	42bc      	cmp	r4, r7
 8003720:	4622      	mov	r2, r4
 8003722:	4631      	mov	r1, r6
 8003724:	bf28      	it	cs
 8003726:	463a      	movcs	r2, r7
 8003728:	f7ff ffca 	bl	80036c0 <memcpy>
 800372c:	4631      	mov	r1, r6
 800372e:	4640      	mov	r0, r8
 8003730:	f7ff fbbc 	bl	8002eac <_free_r>
 8003734:	e7e1      	b.n	80036fa <_realloc_r+0x1e>
 8003736:	4635      	mov	r5, r6
 8003738:	e7df      	b.n	80036fa <_realloc_r+0x1e>

0800373a <_malloc_usable_size_r>:
 800373a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800373e:	1f18      	subs	r0, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	bfbc      	itt	lt
 8003744:	580b      	ldrlt	r3, [r1, r0]
 8003746:	18c0      	addlt	r0, r0, r3
 8003748:	4770      	bx	lr
	...

0800374c <_init>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	bf00      	nop
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr

08003758 <_fini>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr
